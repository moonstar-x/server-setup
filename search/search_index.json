{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This is a simple guide that focuses on the installation and configuration process of my little home server that runs multiple services for various purposes composed of two computers. The server now uses Docker for most of its services. This is an improved version of the previous server guide, some of the services from the previous version are present here, some are gone for good.</p> <p>As you will notice, this server setup is actually composed of multiple devices with specific roles. That go along the lines of:</p> <ul> <li>Linux Server (Main Server)</li> </ul> <p>Hosts most of the services I use for my personal (and shared) use.</p> <ul> <li>VPS (Monitoring)</li> </ul> <p>Hosts a monitoring service to serve a status page for the main services.</p>"},{"location":"bootcamp/games/","title":"Introduction","text":"<p>This section describes the game servers installed on the Windows partition of the Mac Mini server.</p> <p>Game server installation is based off my own game-server-updater script. You can check it out if you're interested on using it.</p> <p>Further sections for game servers downloaded with SteamCMD will include the commands necessary to install them since the script already includes them. This guide assumes you're using said script to install the servers.</p> <p>If you're interested, I have uploaded all the configs for these servers in a separate repo which are referenced all over the following sections.</p>"},{"location":"bootcamp/games/arma3/","title":"Arma 3","text":"<p>Use this script to install the game server.</p> <p>This script is a bit different from the rest because it has a post run function that will automatically create symlinks for the mod folders and will update the mod keys inside the <code>keys</code> folder of the server.</p> <p>Running this script is enough to get the server ready with mods installed.</p>"},{"location":"bootcamp/games/arma3/#configuration","title":"Configuration","text":"<p>Inside the server folder you should create a <code>scripts</code> folder and then use subfolders for each server configuration you need. In my case, one of my subfolders is named <code>horror_cup</code>.  Inside this subfolder, you should have a <code>server.cfg</code> file. You can base yourself off the following:</p>"},{"location":"bootcamp/games/arma3/#running-the-server","title":"Running the Server","text":"<p>To run this server you should create a script inside the subfolder of the <code>scripts</code> folder. In my case, one of my subfolders is named <code>horror_cup</code>. Inside this subfolder, you should have a <code>start.bat</code> file. You can base yourself off the following:</p> <p>The <code>MODLIST</code> variable contains the names of the symlinked folders for the mods to load on the server. This should be a string with the names of the mod folders separated by a <code>;</code> character. For unix users, the <code>;</code> character should be escaped (<code>\\;</code>).</p>"},{"location":"bootcamp/games/arma3/#running-the-server-with-headless-client","title":"Running the Server with Headless Client","text":"<p>If you wish to run the server with a headless client alongside the server on the same machine, you can base yourself of the following <code>start.bat</code> file.</p>"},{"location":"bootcamp/games/csgo/","title":"Counter Strike: Global Offensive","text":"<p>Use this script to install the game server.</p>"},{"location":"bootcamp/games/csgo/#sourcemod","title":"Sourcemod","text":"<p>In order to add plugins on your server, you'll need Sourcemod and Metamod, click on the mentioned links to download the necessary files.</p> <p>These archives will include folders named <code>addons</code> and <code>cfg</code> which should be placed inside the <code>csgo</code> folder of the server.</p> <p>Additionally, you need to download a <code>metamod.vdf</code>. Inside the link, choose the appropriate game and download the file. This file should be placed inside <code>csgo/addons</code>.</p>"},{"location":"bootcamp/games/csgo/#updating-admins","title":"Updating Admins","text":"<p>Some commands will require you to be an admin. First, you should get your steam user's STEAM32 ID which can be found here. Once you have this, append the following line inside the <code>csgo/addons/sourcemod/configs/admins_simple.ini</code> file:</p> <pre><code>STEAM_0:1:23456789 99:z\n</code></pre> <p>Info</p> <p>Replace <code>STEAM_0:1:23456789</code> with your actual Steam ID.</p>"},{"location":"bootcamp/games/csgo/#plugins","title":"Plugins","text":"<p>Currently this server does not have any plugins set up.</p>"},{"location":"bootcamp/games/csgo/#configuration","title":"Configuration","text":"<p>Inside the <code>csgo/cfg</code> folder you should create a <code>server.cfg</code> and add the commands to configure your server. You may base yourself from my own config:</p>"},{"location":"bootcamp/games/csgo/#running-the-server","title":"Running the Server","text":"<p>To run this server you should run the following command:</p> <pre><code>srcds.exe -game csgo -console -usercon -tickrate 128 +game_type 1 +game_mode 2 +mapgroup mg_active +map de_mirage\n</code></pre>"},{"location":"bootcamp/games/csgo/#with-a-script","title":"With a Script","text":"<p>You may also create a bat script to run this server easily. I like to create a <code>scripts</code> folder inside the root of the server folder and add whatever scripts I need in there.</p> <p>For this case, the <code>scripts/start.bat</code> file contains the following:</p>"},{"location":"bootcamp/games/dayz/","title":"DayZ","text":"<p>Use this script to install the game server.</p>"},{"location":"bootcamp/games/dayz/#configuration","title":"Configuration","text":"<p>Inside the server folder you should create a <code>scripts</code> folder and then use subfolders for each server configuration you need. In my case, one of my subfolders is named <code>regular</code>.  Inside this subfolder, you should have a <code>server.cfg</code> file. You can base yourself off the following:</p>"},{"location":"bootcamp/games/dayz/#running-the-server","title":"Running the Server","text":"<p>To run this server you should create a script inside the subfolder of the <code>scripts</code> folder. In my case, one of my subfolders is named <code>regular</code>. Inside this subfolder, you should have a <code>start.bat</code> file. You can base yourself off the following:</p>"},{"location":"bootcamp/games/l4d2/","title":"Left 4 Dead 2","text":"<p>Use this script to install the game server.</p>"},{"location":"bootcamp/games/l4d2/#sourcemod","title":"Sourcemod","text":"<p>In order to add plugins on your server, you'll need Sourcemod and Metamod, click on the mentioned links to download the necessary files.</p> <p>These archives will include folders named <code>addons</code> and <code>cfg</code> which should be placed inside the <code>left4dead2</code> folder of the server.</p>"},{"location":"bootcamp/games/l4d2/#updating-admins","title":"Updating Admins","text":"<p>Some commands will require you to be an admin. First, you should get your steam user's STEAM32 ID which can be found here. Once you have this, append the following line inside the <code>left4dead2/addons/sourcemod/configs/admins_simple.ini</code> file:</p> <pre><code>STEAM_0:1:23456789 99:z\n</code></pre> <p>Info</p> <p>Replace <code>STEAM_0:1:23456789</code> with your actual Steam ID.</p>"},{"location":"bootcamp/games/l4d2/#plugins","title":"Plugins","text":"<p>Currently this server has the following plugins:</p>"},{"location":"bootcamp/games/l4d2/#autobhop","title":"AutoBhop","text":"<p>This plugin allows for easier bunny hopping.</p> <p>You can download it from here.</p> <p>The <code>.smx</code> file should be placed inside <code>left4dead2/addons/sourcemod/plugins</code>.</p>"},{"location":"bootcamp/games/l4d2/#configuration","title":"Configuration","text":"<p>Inside the <code>left4dead2/cfg</code> folder you should create a <code>server.cfg</code> and add the commands to configure your server. You may base yourself from my own config:</p>"},{"location":"bootcamp/games/l4d2/#running-the-server","title":"Running the Server","text":"<p>To run this server you should run the following command:</p> <pre><code>srcds.exe -game left4dead2 -console -maxplayers 4 +map c1m1_hotel\n</code></pre>"},{"location":"bootcamp/games/l4d2/#with-a-script","title":"With a Script","text":"<p>You may also create a bat script to run this server easily. I like to create a <code>scripts</code> folder inside the root of the server folder and add whatever scripts I need in there.</p> <p>For this case, the <code>scripts/start.bat</code> file contains the following:</p>"},{"location":"bootcamp/games/nmrih/","title":"No More Room in Hell","text":"<p>Use this script to install the game server.</p>"},{"location":"bootcamp/games/nmrih/#sourcemod","title":"Sourcemod","text":"<p>In order to add plugins on your server, you'll need Sourcemod and Metamod, click on the mentioned links to download the necessary files.</p> <p>These archives will include folders named <code>addons</code> and <code>cfg</code> which should be placed inside the <code>nrmih</code> folder of the server.</p>"},{"location":"bootcamp/games/nmrih/#updating-admins","title":"Updating Admins","text":"<p>Some commands will require you to be an admin. First, you should get your steam user's STEAM32 ID which can be found here. Once you have this, append the following line inside the <code>nrmih/addons/sourcemod/configs/admins_simple.ini</code> file:</p> <pre><code>STEAM_0:1:23456789 99:z\n</code></pre> <p>Info</p> <p>Replace <code>STEAM_0:1:23456789</code> with your actual Steam ID.</p>"},{"location":"bootcamp/games/nmrih/#plugins","title":"Plugins","text":"<p>Currently this server does not have any plugins set up.</p>"},{"location":"bootcamp/games/nmrih/#configuration","title":"Configuration","text":"<p>Inside the <code>nrmih/cfg</code> folder you should create a <code>server.cfg</code> and add the commands to configure your server. You may base yourself from my own config:</p>"},{"location":"bootcamp/games/nmrih/#running-the-server","title":"Running the Server","text":"<p>To run this server you should run the following command:</p> <pre><code>srcds.exe -game nmrih -console -maxplayers 8 +map nmo_broadway\n</code></pre>"},{"location":"bootcamp/games/nmrih/#with-a-script","title":"With a Script","text":"<p>You may also create a bat script to run this server easily. I like to create a <code>scripts</code> folder inside the root of the server folder and add whatever scripts I need in there.</p> <p>For this case, the <code>scripts/start.bat</code> file contains the following:</p>"},{"location":"bootcamp/games/reactivedrop/","title":"Alien Swarm Reactive Drop","text":"<p>Use this script to install the game server.</p>"},{"location":"bootcamp/games/reactivedrop/#sourcemod","title":"Sourcemod","text":"<p>In order to add plugins on your server, you'll need Sourcemod and Metamod, click on the mentioned links to download the necessary files.</p> <p>These archives will include folders named <code>addons</code> and <code>cfg</code> which should be placed inside the <code>reactivedrop</code> folder of the server.</p>"},{"location":"bootcamp/games/reactivedrop/#updating-admins","title":"Updating Admins","text":"<p>Some commands will require you to be an admin. First, you should get your steam user's STEAM32 ID which can be found here. Once you have this, append the following line inside the <code>reactivedrop/addons/sourcemod/configs/admins_simple.ini</code> file:</p> <pre><code>STEAM_0:1:23456789 99:z\n</code></pre> <p>Info</p> <p>Replace <code>STEAM_0:1:23456789</code> with your actual Steam ID.</p>"},{"location":"bootcamp/games/reactivedrop/#plugins","title":"Plugins","text":"<p>Currently this server does not have any plugins set up.</p>"},{"location":"bootcamp/games/reactivedrop/#configuration","title":"Configuration","text":"<p>Inside the <code>reactivedrop/cfg</code> folder you should create a <code>server.cfg</code> and add the commands to configure your server. You may base yourself from my own config:</p> <p>Additionally to this file, you need a <code>workshop.cfg</code> file inside <code>reactivedrop/cfg</code> and include commands to download workshop content into the server (not necessary though).</p>"},{"location":"bootcamp/games/reactivedrop/#running-the-server","title":"Running the Server","text":"<p>To run this server you should run the following command:</p> <pre><code>srcds.exe -game reactivedrop -console -maxplayers 8 +map lobby\n</code></pre>"},{"location":"bootcamp/games/reactivedrop/#with-a-script","title":"With a Script","text":"<p>You may also create a bat script to run this server easily. I like to create a <code>scripts</code> folder inside the root of the server folder and add whatever scripts I need in there.</p> <p>For this case, the <code>scripts/start.bat</code> file contains the following:</p>"},{"location":"bootcamp/games/svencoop/","title":"Sven Coop","text":"<p>Use this script to install the game server.</p>"},{"location":"bootcamp/games/svencoop/#configuration","title":"Configuration","text":"<p>Inside the <code>svencoop</code> folder you should create a <code>server.cfg</code> and add the commands to configure your server. You may base yourself from my own config:</p>"},{"location":"bootcamp/games/svencoop/#running-the-server","title":"Running the Server","text":"<p>To run this server you should run the following command:</p> <pre><code>svends.exe -console +maxplayers 8 +log on +map _server_start\n</code></pre>"},{"location":"bootcamp/games/svencoop/#with-a-script","title":"With a Script","text":"<p>You may also create a bat script to run this server easily. I like to create a <code>scripts</code> folder inside the root of the server folder and add whatever scripts I need in there.</p> <p>For this case, the <code>scripts/start.bat</code> file contains the following:</p>"},{"location":"bootcamp/games/valheim/","title":"Valheim","text":"<p>Use this script to install the game server.</p>"},{"location":"bootcamp/games/valheim/#running-the-server","title":"Running the Server","text":"<p>To run this server you need to create a script file. I like to create a <code>scripts</code> folder inside the root of the server folder and add whatever scripts I need in there.</p> <p>For this case, the <code>scripts/start.bat</code> file contains the following:</p>"},{"location":"bootcamp/setting-up/","title":"Introduction","text":"<p>This section details the configuration process of the Mac Mini server which is also configured with Bootcamp to dual boot Windows.</p>"},{"location":"bootcamp/setting-up/#server-specs","title":"Server Specs","text":"<p>The Mac Mini server has the following specs:</p> <ul> <li>Main OS: macOS Catalina 10.15.7</li> <li>Bootcamp OS: Windows 10 Home</li> <li>Model: Mac Mini (Late 2012)</li> <li>CPU: Intel Core i7-3615QM (8 Threads) @2.30GHz</li> <li>RAM: 2x8GB DDR3 @1600MHz (16GB - Dual Channel)</li> <li>Storage:<ol> <li>256GB Kingston SATA SSD</li> <li>1TB Apple SATA HDD</li> </ol> </li> </ul>"},{"location":"bootcamp/setting-up/bootcamp/","title":"Bootcamp","text":"<p>Bootcamp is a tool made by Apple to allow users to dual boot Windows on their Intel based Mac computers.</p> <p>The assistant comes already installed on all macOS version, so there is no need to install anything else.</p> <p>This page will not describe the process of installing Windows since it's mostly straightforward.</p> <p>You can acquire Windows 10 image from Microsoft.</p> <p>For our use case, we're leaving macOS with 150GB and Windows with 100GB on the main drive.</p>"},{"location":"bootcamp/setting-up/mac-os-configuration/","title":"macOS Configuration","text":"<p>Since the installation of macOS is graphically based there will not be any step by step indications of how to do it.</p> <p>Instead, this page specifies the software installed on this computer.</p>"},{"location":"bootcamp/setting-up/mac-os-configuration/#applications","title":"Applications","text":"<p>Here's a list of all the applications installed on the Mac Mini in macOS.</p> <ul> <li>Chrome Remote Desktop</li> <li>Docker Desktop</li> <li>Google Chrome</li> <li>Homebrew</li> <li>iTerm2</li> <li>Node.js</li> <li>nvm</li> <li>oh-my-zsh</li> <li>Sublime Text</li> <li>Visual Studio Code</li> </ul> <p>Note</p> <p>In the case of Docker Desktop, the link provided points to the latest download supported for macOS Catalina since newer versions require at least Big Sur.</p>"},{"location":"bootcamp/setting-up/mac-os-configuration/#homebrew-packages","title":"Homebrew Packages","text":"<p>Here's some commands related to homebrew that install some necessary packages:</p> <pre><code>brew tap adoptopenjdk/openjdk\nbrew install neofetch adoptopenjdk htop\n</code></pre>"},{"location":"bootcamp/setting-up/mac-os-configuration/#jenkins-agent","title":"Jenkins Agent","text":"<p>Jenkins agents do not need any special software to run (other than Java). However, it is necessary to enable SSH connections on macOS by heading to System Preferences &gt; Sharing and enabling Remote Login.</p>"},{"location":"bootcamp/setting-up/windows-configuration/","title":"Windows Configuration","text":"<p>Note</p> <p>This Mac Mini in Windows will operate mainly for game servers.</p> <p>Since the installation of Windows is graphically based there will not be any step by step indications of how to do it.</p> <p>Instead, this page specifies the software installed on this computer.</p>"},{"location":"bootcamp/setting-up/windows-configuration/#applications","title":"Applications","text":"<p>Here's a list of all the applications installed on the Mac Mini in macOS.</p> <ul> <li>Chrome Remote Desktop</li> <li>Google Chrome</li> <li>Java SE</li> <li>Python</li> <li>SharpKeys</li> <li>Steam</li> <li>SteamCMD</li> <li>Visual Studio Code</li> <li>VLC</li> <li>Windows Terminal (Download from Microsoft Store)</li> <li>Winrar</li> <li>ZeroTier</li> </ul> <p>Note</p> <p>SharpKeys is a program that allows you to remap keys in your keyboard. I use it mostly to switch the Z and Y keys on my keyboard while keeping my own keyboard layout.</p>"},{"location":"bootcamp/setting-up/windows-configuration/#dependencies","title":"Dependencies","text":"<p>Since some game servers require some redistributables, here's the download links for them:</p> <ul> <li>DirectX</li> <li>VCRedist 2015, 2017, 2019 and 2022</li> <li>VCRedist All-in-One</li> </ul> <p>The last download contains all the Visual C++ Redistributables except for 2022. It also comes with a handy script that installs all of them automatically.</p>"},{"location":"bootcamp/setting-up/windows-configuration/#scoop","title":"Scoop","text":"<p>Scoop is a package manager for Windows which can be installed by running the following command in an elevated powershell terminal:</p> <pre><code>iwr -useb get.scoop.sh | iex\n</code></pre> <p>Here's some commands related to scoop that install some necessary packages:</p> <pre><code>scoop install git neofetch\n</code></pre>"},{"location":"linux/services/","title":"Introduction","text":"<p>This section details the installation and configuration of all the services run by the server. Almost all of these services are run through Docker, so make sure you have it set up before reading any further.</p>"},{"location":"linux/services/#configuration","title":"Configuration","text":"<p>All services will be located in the home folder. In order to be a bit more organized, we'll create a folder for everything:</p> <pre><code>mkdir ~/services\n</code></pre>"},{"location":"linux/services/analytics/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to analytics services.</p> <pre><code>mkdir ~/services/analytics\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"linux/services/analytics/umami/","title":"Umami","text":"<p>Umami is a web analytics service.</p> <p>There is an official image for this service that we'll use: ghcr.io/umami-software.</p>"},{"location":"linux/services/analytics/umami/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/analytics/umami\n</code></pre>"},{"location":"linux/services/analytics/umami/#docker-compose","title":"Docker Compose","text":"<p>Umami will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: ghcr.io/umami-software/umami:postgresql-latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - umami\n    depends_on:\n      db:\n        condition: service_healthy\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl http://localhost:3000/api/heartbeat\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n    environment:\n      TZ: America/Guayaquil\n      DATABASE_URL: postgresql://DATABASE_USER:DATABASE_PASSWORD@db:5432/umami\n      DATABASE_TYPE: postgresql\n      APP_SECRET: APP_SECRET\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.umami.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.umami.entrypoints: public\n      traefik.http.routers.umami.service: umami@docker\n      traefik.http.services.umami.loadbalancer.server.port: 3000\n\n  db:\n    image: postgres:15-alpine\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n    volumes:\n      - ./data:/var/lib/postgresql/data\n    environment:\n      TZ: America/Guayaquil\n      POSTGRES_DB: umami\n      POSTGRES_USER: DATABASE_USER\n      POSTGRES_PASSWORD: DATABASE_PASSWORD\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Make sure to change <code>DATABASE_USER</code> and <code>DATABASE_PASSWORD</code> to a custom secret value.</p> <p>Note</p> <p>Make sure to change <code>APP_SECRET</code> to a custom secret value.</p> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/analytics/umami/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/analytics/umami/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/analytics/umami/#post-configuration","title":"Post Configuration","text":"<p>The default credentials:</p> <ul> <li>User: <code>admin</code></li> <li>Password: <code>umami</code></li> </ul> <p>Make sure to change these credentials or remove them altogether.</p>"},{"location":"linux/services/automation/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to automation services.</p> <pre><code>mkdir ~/services/automation\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"linux/services/automation/homebridge/","title":"Homebridge","text":"<p>Homebridge is an IoT bridge for HomeKit that brings support to iOS's HomeKit to smart home devices that originally do not provide support for it.</p> <p>There is an official image for this service that we'll use: homebridge/homebridge.</p>"},{"location":"linux/services/automation/homebridge/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/automation/homebridge\n</code></pre>"},{"location":"linux/services/automation/homebridge/#docker-compose","title":"Docker Compose","text":"<p>Homebridge will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: homebridge/homebridge:latest\n    restart: unless-stopped\n    network_mode: host\n    volumes:\n      - ./data:/homebridge\n    environment:\n      TZ: America/Guayaquil\n</code></pre>"},{"location":"linux/services/automation/homebridge/#post-installation","title":"Post-Installation","text":"<p>We'll need to allow the service's port on our firewall.</p> <pre><code>sudo ufw allow 8581/tcp\nsudo ufw allow 51845/tcp\nsudo ufw allow 51845/udp\n</code></pre> <p>Note</p> <p>Make sure to check the <code>51845</code> port applies for you, I believe this port is chosen at random when setting-up Homebridge. You can check this by reading the output logs when setting-up this service.</p>"},{"location":"linux/services/automation/homebridge/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/automation/n8n/","title":"n8n","text":"<p>n8n is a self-hosted node based automation to run run jobs based on triggers similarly to IFTTT.</p> <p>There is an official image for this service that we'll use: n8nio/n8n.</p>"},{"location":"linux/services/automation/n8n/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/automation/n8n\n</code></pre>"},{"location":"linux/services/automation/n8n/#docker-compose","title":"Docker Compose","text":"<p>n8n will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: n8nio/n8n:latest\n    restart: unless-stopped\n    depends_on:\n      - mongo\n      - redis\n      - rabbitmq\n    extra_hosts:\n      - host.docker.internal:host-gateway\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - n8n\n    volumes:\n      - ./data:/home/node/.n8n\n      - ./local:/home/node/host\n      - /media/sata_2tb/MVs:/home/node/binds/MVs\n    environment:\n      TZ: America/Guayaquil\n      GENERIC_TIMEZONE: America/Guayaquil\n      NODE_ENV: production\n      N8N_PORT: 5678\n      N8N_PROTOCOL: https\n      N8N_HOST: subdomain.example.com\n      WEBHOOK_URL: https://subdomain.example.com/\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.n8n.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.n8n.entrypoints: public\n      traefik.http.routers.n8n.service: n8n@docker\n      traefik.http.services.n8n.loadbalancer.server.port: 5678\n\n  mongo:\n    image: mongo:latest\n    restart: unless-stopped\n    volumes:\n      - ./mongo:/data/db\n    environment:\n      TZ: America/Guayaquil\n      MONGO_INITDB_ROOT_USERNAME: DATABASE_USER\n      MONGO_INITDB_ROOT_PASSWORD: DATABASE_PASSWORD\n\n  mongo-express:\n    image: mongo-express:latest\n    restart: unless-stopped\n    depends_on:\n      - mongo\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - automation-mongo\n    environment:\n      TZ: America/Guayaquil\n      ME_CONFIG_OPTIONS_EDITORTHEME: ambiance\n      ME_CONFIG_BASICAUTH_USERNAME: BASIC_AUTH_USER\n      ME_CONFIG_BASICAUTH_PASSWORD: BASIC_AUTH_PASSWORD\n      ME_CONFIG_MONGODB_SERVER: mongo\n      ME_CONFIG_MONGODB_ADMINUSERNAME: DATABASE_USER\n      ME_CONFIG_MONGODB_ADMINPASSWORD: DATABASE_PASSWORD\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.automation-mongo.rule: Host(`mongo.automation.home.example.com`) || Host(`mongo.automation.vpn.example.com`)\n      traefik.http.routers.automation-mongo.entrypoints: local-https\n      traefik.http.routers.automation-mongo.tls: true\n      traefik.http.routers.automation-mongo.tls.certresolver: le\n      traefik.http.routers.automation-mongo.service: automation-mongo@docker\n      traefik.http.services.automation-mongo.loadbalancer.server.port: 8081\n\n  redis:\n    image: redis:latest\n    restart: unless-stopped\n    environment:\n      TZ: America/Guayaquil\n\n  redis-insight:\n    image: redis/redisinsight:latest\n    restart: unless-stopped\n    user: 1000:1000\n    depends_on:\n      - redis\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - automation-redis\n    volumes:\n      - ./redis-insight:/data\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.automation-redis.rule: Host(`redis.automation.home.example.com`) || Host(`redis.automation.vpn.example.com`)\n      traefik.http.routers.automation-redis.entrypoints: local-https\n      traefik.http.routers.automation-redis.tls: true\n      traefik.http.routers.automation-redis.tls.certresolver: le\n      traefik.http.routers.automation-redis.service: automation-redis@docker\n      traefik.http.services.automation-redis.loadbalancer.server.port: 5540\n\n  rabbitmq:\n    image: rabbitmq:3-management\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - automation-rabbitmq\n    volumes:\n      - ./rabbitmq:/var/lib/rabbitmq\n    environment:\n      TZ: America/Guayaquil\n      RABBITMQ_DEFAULT_USER: MANAGEMENT_USER\n      RABBITMQ_DEFAULT_PASS: MANAGEMENT_PASS\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.automation-rabbit-mq.rule: Host(`rabbitmq.automation.home.moonstar-x.dev`) || Host(`rabbitmq.automation.vpn.moonstar-x.dev`)\n      traefik.http.routers.automation-rabbit-mq.entrypoints: local-https\n      traefik.http.routers.automation-rabbit-mq.tls: true\n      traefik.http.routers.automation-rabbit-mq.tls.certresolver: le\n      traefik.http.routers.automation-rabbit-mq.service: automation-rabbit-mq@docker\n      traefik.http.services.automation-rabbit-mq.loadbalancer.server.port: 15672\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Make sure to change <code>DATABASE_USER</code> and <code>DATABASE_PASSWORD</code> to a custom secret value.</p> <p>Note</p> <p>Make sure to change <code>BASIC_AUTH_USER</code> and <code>BASIC_AUTH_PASSWORD</code> to a custom secret value.</p> <p>Note</p> <p>Make sure to change <code>MANAGEMENT_USER</code> and <code>MANAGEMENT_PASS</code> to a custom secret value.</p> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/automation/n8n/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/automation/n8n/#extras","title":"Extras","text":"<p>Technically to get n8n up and running you only need the <code>web</code> container. However, we've extended this stack with other services to use alongside n8n like:</p> <ul> <li>mongo as a database for data persistence.</li> <li>redis as a cache for caching certain operations to accelerate certain workflows.</li> <li>rabbitmq as a message queue for processing events for certain workflows.</li> </ul> <p>Each of these services come with web based dashboards to access their data from outside if needed.</p>"},{"location":"linux/services/automation/n8n/#local-data","title":"Local Data","text":"<p>Additionally, you may have noticed the volumes in the <code>web</code> container. Only the first volume is required to keep n8n's data, the rest are extra volumes that we've included to interface with the host's local filesystem.</p>"},{"location":"linux/services/automation/n8n/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/automation/rsshub/","title":"RSSHub","text":"<p>RSSHub is a RSS bridge that generates RSS feeds for services that normally do not support them.</p> <p>There is an official image for this service that we'll use: diygod/rsshub.</p>"},{"location":"linux/services/automation/rsshub/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/automation/rsshub\n</code></pre>"},{"location":"linux/services/automation/rsshub/#docker-compose","title":"Docker Compose","text":"<p>RSSHub will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: diygod/rsshub:latest\n    restart: unless-stopped\n    depends_on:\n      - redis\n      - browserless\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - rsshub\n    environment:\n      TZ: America/Guayaquil\n      NODE_ENV: production\n      CACHE_TYPE: redis\n      REDIS_URL: redis://redis:6379\n      PUPPETEER_WS_ENDPOINT: ws://browserless:3000\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.rsshub.rule: Host(`rss.home.example.com`) || Host(`rss.vpn.example.com`)\n      traefik.http.routers.rsshub.entrypoints: local-https\n      traefik.http.routers.rsshub.tls: true\n      traefik.http.routers.rsshub.tls.certresolver: le\n      traefik.http.routers.rsshub.service: rsshub@docker\n      traefik.http.services.rsshub.loadbalancer.server.port: 1200\n\n  browserless:\n    image: browserless/chrome:latest\n    restart: unless-stopped\n    ulimits:\n      core:\n        hard: 0\n        soft: 0\n\n  redis:\n    image: redis:alpine\n    restart: unless-stopped\n    volumes:\n      - ./redis:/data\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre>"},{"location":"linux/services/automation/rsshub/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/automation/rsshub/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/data/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to data services.</p> <pre><code>mkdir ~/services/data\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"linux/services/data/actual/","title":"Actual","text":"<p>Actual is a self-hosted budgeting application.</p> <p>There is an official image for this service that we'll use: actualbudget/actual-server.</p>"},{"location":"linux/services/data/actual/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/data/actual\n</code></pre>"},{"location":"linux/services/data/actual/#docker-compose","title":"Docker Compose","text":"<p>Actual will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: actualbudget/actual-server:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - actual\n    volumes:\n      - ./data:/data\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.actual.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.actual.entrypoints: public\n      traefik.http.routers.actual.service: actual@docker\n      traefik.http.services.actual.loadbalancer.server.port: 5006\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/data/actual/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/data/actual/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/data/memos/","title":"Memos","text":"<p>Memos is a note taking app that somewhat mimics what Twitter looks like. Perfect to use as a personal news feed.</p> <p>There is an official image for this service that we'll use: neosmemo/memos.</p>"},{"location":"linux/services/data/memos/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/data/memos\n</code></pre>"},{"location":"linux/services/data/memos/#docker-compose","title":"Docker Compose","text":"<p>Memos will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: neosmemo/memos:stable\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - memos\n    volumes:\n      - ./data:/var/opt/memos\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.memos.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.memos.entrypoints: public\n      traefik.http.routers.memos.service: memos@docker\n      traefik.http.services.memos.loadbalancer.server.port: 5230\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/data/memos/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/data/memos/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/data/nextcloud/","title":"Nextcloud","text":"<p>Nextcloud is a self-hosted cloud data server, useful for keeping documents in your own server.</p> <p>There is an official image for this service that we'll use: nextcloud.</p>"},{"location":"linux/services/data/nextcloud/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/data/nextcloud\n</code></pre>"},{"location":"linux/services/data/nextcloud/#dockerfile","title":"Dockerfile","text":"<p>Despite the service having an official image available, it lacks a dependency necessary to allow for SMB shares as external storage.</p> <p>The following is the (tiny) <code>Dockerfile</code> that will be used for this service:</p> <pre><code>FROM nextcloud:stable\n\nRUN apt-get update &amp;&amp; apt-get install -y procps smbclient &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre>"},{"location":"linux/services/data/nextcloud/#docker-compose","title":"Docker Compose","text":"<p>Nextcloud will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    build: .\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - nextcloud\n    depends_on:\n      - db\n    volumes:\n      - /media/sata_2tb/Nextcloud:/var/www/html\n    environment:\n      TZ: America/Guayaquil\n      MYSQL_DATABASE: nextcloud\n      MYSQL_USER: nextcloud\n      MYSQL_PASSWORD: DATABASE_PASSWORD\n      MYSQL_HOST: db\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.nextcloud.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.nextcloud.entrypoints: public\n      traefik.http.routers.nextcloud.service: nextcloud@docker\n      traefik.http.services.nextcloud.loadbalancer.server.port: 80\n\n  db:\n    image: mariadb:10.5\n    restart: unless-stopped\n    volumes:\n      - ./data:/var/lib/mysql\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW\n    environment:\n      TZ: America/Guayaquil\n      MYSQL_ROOT_PASSWORD: DATABASE_PASSWORD\n      MYSQL_DATABASE: nextcloud\n      MYSQL_USER: nextcloud\n      MYSQL_PASSWORD: DATABASE_PASSWORD\n\n  cron:\n    image: nextcloud:stable\n    restart: unless-stopped\n    depends_on:\n      - web\n    volumes:\n      - /media/sata_2tb/Nextcloud:/var/www/html\n    entrypoint: /cron.sh\n    environment:\n      TZ: America/Guayaquil\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Make sure to change <code>DATABASE_PASSWORD</code> to a custom secret value.</p> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/data/nextcloud/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/data/nextcloud/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/data/pairdrop/","title":"Pairdrop","text":"<p>Pairdrop is a peer-to-peer file sharing service that mimics Apple's AirDrop functionality through a web interface.</p> <p>There is no official image for this service, so we'll use ghcr.io/linuxserver/pairdrop.</p>"},{"location":"linux/services/data/pairdrop/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/data/pairdrop\n</code></pre>"},{"location":"linux/services/data/pairdrop/#docker-compose","title":"Docker Compose","text":"<p>Pairdrop will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: ghcr.io/linuxserver/pairdrop:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - pairdrop\n    environment:\n      TZ: America/Guayaquil\n      PUID: 1000\n      PGID: 1000\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.pairdrop.rule: Host(`pairdrop.home.example.com`) || Host(`pairdrop.vpn.example.com`)\n      traefik.http.routers.pairdrop.entrypoints: local-https\n      traefik.http.routers.pairdrop.tls: true\n      traefik.http.routers.pairdrop.tls.certresolver: le\n      traefik.http.routers.pairdrop.service: pairdrop@docker\n      traefik.http.services.pairdrop.loadbalancer.server.port: 3000\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>In the case of the <code>PUID</code> and <code>PGID</code> environment variables, <code>1000</code> corresponds to the user's UID and GID respectively. You can find the values for your own user by running <code>id $whoami</code>.</p>"},{"location":"linux/services/data/pairdrop/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/data/pairdrop/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/data/rx-resume/","title":"Reactive Resume","text":"<p>Reactive Resume is a tool to easily create beautiful CVs.</p> <p>There is an official image for this service that we'll use: amruthpillai/reactive-resume.</p>"},{"location":"linux/services/data/rx-resume/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/data/rxresume\n</code></pre>"},{"location":"linux/services/data/rx-resume/#docker-compose","title":"Docker Compose","text":"<p>Reactive Resume will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  db:\n    image: postgres:15-alpine\n    restart: unless-stopped\n    volumes:\n      - ./data:/var/lib/postgresql/data\n    environment:\n      TZ: America/Guayaquil\n      POSTGRES_DB: rxresume\n      POSTGRES_USER: rxresume\n      POSTGRES_PASSWORD: DATABASE_PASSWORD\n\n  api:\n    image: amruthpillai/reactive-resume:server-latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - rxresume_api\n    depends_on:\n      - db\n    environment:\n      TZ: America/Guayaquil\n      PUBLIC_URL: https://resume.home.example.com\n      PUBLIC_SERVER_URL: https://resume-api.home.example.com\n      POSTGRES_DB: rxresume\n      POSTGRES_USER: rxresume\n      POSTGRES_PASSWORD: DATABASE_PASSWORD\n      SECRET_KEY: SECRET_KEY\n      POSTGRES_HOST: db\n      POSTGRES_PORT: 5432\n      JWT_SECRET: JWT_SECRET\n      JWT_EXPIRY_TIME: 604800\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.rxresume_api.rule: Host(`resume-api.home.example.com`)\n      traefik.http.routers.rxresume_api.entrypoints: local-https\n      traefik.http.routers.rxresume_api.tls: true\n      traefik.http.routers.rxresume_api.tls.certresolver: le\n      traefik.http.routers.rxresume_api.service: rxresume_api@docker\n      traefik.http.services.rxresume_api.loadbalancer.server.port: 3100\n\n  web:\n    image: amruthpillai/reactive-resume:client-latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - rxresume_web\n    depends_on:\n      - api\n    environment:\n      TZ: America/Guayaquil\n      PUBLIC_URL: https://resume.home.example.com\n      PUBLIC_SERVER_URL: https://resume-api.home.example.com\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.rxresume_web.rule: Host(`resume.home.example.com`)\n      traefik.http.routers.rxresume_web.entrypoints: local-https\n      traefik.http.routers.rxresume_web.tls: true\n      traefik.http.routers.rxresume_web.tls.certresolver: le\n      traefik.http.routers.rxresume_web.service: rxresume_web@docker\n      traefik.http.services.rxresume_web.loadbalancer.server.port: 3000\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Make sure to change <code>DATABASE_PASSWORD</code>, <code>SECRET_KEY</code>, and <code>JWT_SECRET</code> to a custom secret value.</p> <p>Note</p> <p>Make sure to change <code>http://public_client_domain.com</code> and <code>http://public_api_domain.com</code> to the domains where each service is hosted.</p>"},{"location":"linux/services/data/rx-resume/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/data/wallos/","title":"Wallos","text":"<p>Wallos is a tracker for subscriptions. It serves as a way to take note of the subscriptions you have and get a monthly and yearly view of the total cost.</p> <p>There is an official image for this service that we'll use: bellamy/wallos.</p>"},{"location":"linux/services/data/wallos/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/data/wallos\n</code></pre>"},{"location":"linux/services/data/wallos/#docker-compose","title":"Docker Compose","text":"<p>Wallos will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: bellamy/wallos:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - wallos\n    volumes:\n      - ./data:/var/www/html/db\n      - ./logos:/var/www/html/images/uploads/logos\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.wallos.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.wallos.entrypoints: public\n      traefik.http.routers.wallos.service: wallos@docker\n      traefik.http.services.wallos.loadbalancer.server.port: 80\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/data/wallos/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/data/wallos/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/development/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to development services.</p> <pre><code>mkdir ~/services/development\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"linux/services/development/gitea/","title":"Gitea","text":"<p>Gitea is a self-hosted git server, useful for having a private VCS solution.</p> <p>There is an official image for this service that we'll use: gitea/gitea.</p>"},{"location":"linux/services/development/gitea/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/development/gitea\n</code></pre>"},{"location":"linux/services/development/gitea/#docker-compose","title":"Docker Compose","text":"<p>Gitea will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: gitea/gitea:latest\n    restart: unless-stopped\n    depends_on:\n      - db\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - gitea\n    volumes:\n      - ./data:/data\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.gitea.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.gitea.entrypoints: public\n      traefik.http.routers.gitea.service: gitea@docker\n      traefik.http.services.gitea.loadbalancer.server.port: 3000\n\n  db:\n    image: mariadb:10\n    restart: unless-stopped\n    volumes:\n      - ./db:/var/lib/mysql\n    environment:\n      TZ: America/Guayaquil\n      MYSQL_ROOT_PASSWORD: DATABASE_PASSWORD\n      MYSQL_DATABASE: gitea\n      MYSQL_USER: gitea\n      MYSQL_PASSOWRD: DATABASE_PASSWORD\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Make sure to change <code>DATABASE_PASSWORD</code> to a custom secret value.</p> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/development/gitea/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/development/gitea/#post-installation","title":"Post-Installation","text":"<p>Once you have started the server once, edit the config file located inside the <code>data</code> volume:</p> <pre><code>nano data/gitea/conf/app.ini\n</code></pre> <p>And make sure to have the following lines:</p> <pre><code>[service]\nDISABLE_REGISTRATION = true\n</code></pre> <p>This will make sure that nobody else can register into your server without your knowledge.</p>"},{"location":"linux/services/development/gitea/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/development/kroki/","title":"Kroki","text":"<p>Kroki is a web service that exposes diagram services that allow you to generate dynamic diagrams from a <code>GET</code> or <code>POST</code> request. The diagrams are typically defined by text.</p> <p>There is an official image for this service that we'll use: yuzutech/kroki.</p>"},{"location":"linux/services/development/kroki/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/development/kroki\n</code></pre>"},{"location":"linux/services/development/kroki/#docker-compose","title":"Docker Compose","text":"<p>Kroki will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: yuzutech/kroki:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - kroki\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.kroki.rule: Host(`diagrams.home.example.com`) || Host(`diagrams.vpn.example.com`)\n      traefik.http.routers.kroki.entrypoints: local-https\n      traefik.http.routers.kroki.tls: true\n      traefik.http.routers.kroki.tls.certresolver: le\n      traefik.http.routers.kroki.service: kroki@docker\n      traefik.http.services.kroki.loadbalancer.server.port: 8000\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre>"},{"location":"linux/services/development/kroki/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/development/kroki/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/development/penpot/","title":"Penpot","text":"<p>Penpot is a self-hosted UI/UX design tool similar to Figma.</p> <p>There is an official image for this service that we'll use: penpotapp/frontend, penpotapp/backend, and penpotapp/exporter.</p>"},{"location":"linux/services/development/penpot/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/development/penpot\n</code></pre>"},{"location":"linux/services/development/penpot/#docker-compose","title":"Docker Compose","text":"<p>Penpot will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  penpot-frontend:\n    image: penpotapp/frontend:latest\n    restart: unless-stopped\n    depends_on:\n      - penpot-backend\n      - penpot-exporter\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - penpot\n    volumes:\n      - ./assets:/opt/data/assets\n    environment:\n      TZ: America/Guayaquil\n      PENPOT_FLAGS: disable-registration enable-login-with-password enable-webhooks\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.penpot.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.penpot.entrypoints: public\n      traefik.http.routers.penpot.service: penpot@docker\n      traefik.http.services.penpot.loadbalancer.server.port: 80\n\n  penpot-backend:\n    image: penpotapp/backend:latest\n    restart: unless-stopped\n    depends_on:\n      - penpot-postgres\n      - penpot-redis\n    volumes:\n      - ./assets:/opt/data/assets\n    environment:\n      TZ: America/Guayaquil\n      PENPOT_FLAGS: disable-registration enable-login-with-password disable-email-verification disable-smtp enable-prepl-server enable-webhooks disable-telemetry\n      PENPOT_SECRET_KEY: SUPER_SECRET_KEY\n      PENPOT_PREPL_HOST: '0.0.0.0'\n      PENPOT_PUBLIC_URI: https://subdomain.example.com\n      PENPOT_DATABASE_URI: postgresql://penpot-postgres/penpot\n      PENPOT_DATABASE_USERNAME: penpot\n      PENPOT_DATABASE_PASSWORD: DATABASE_PASSWORD\n      PENPOT_REDIS_URI: redis://penpot-redis/0\n      PENPOT_ASSETS_STORAGE_BACKEND: assets-fs\n      PENPOT_STORAGE_ASSETS_FS_DIRECTORY: /opt/data/assets\n      PENPOT_TELEMETRY_ENABLED: false\n\n  penpot-exporter:\n    image: penpotapp/exporter:latest\n    restart: unless-stopped\n    environment:\n      TZ: America/Guayaquil\n      PENPOT_PUBLIC_URI: https://subdomain.example.com\n      PENPOT_REDIS_URI: redis://penpot-redis/0\n\n  penpot-postgres:\n    image: postgres:15\n    restart: unless-stopped\n    volumes:\n      - ./db:/var/lib/postgresql/data\n    environment:\n      TZ: America/Guayaquil\n      POSTGRES_INITDB_ARGS: --data-checksums\n      POSTGRES_DB: penpot\n      POSTGRES_USER: penpot\n      POSTGRES_PASSWORD: DATABASE_PASSWORD\n\n  penpot-redis:\n    image: redis:7\n    restart: unless-stopped\n    environment:\n      TZ: America/Guayaquil\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Make sure to change <code>DATABASE_PASSWORD</code> to a custom secret value.</p> <p>Note</p> <p>Make sure to change <code>SUPER_SECRET_KEY</code> to a custom secret value.</p> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p> <p>Note</p> <p>The container names actually matter in this case. It seems someplace the names might be hardcoded and they really need to be named <code>penpot-backend</code> and <code>penpot-frontend</code>.</p>"},{"location":"linux/services/development/penpot/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/development/penpot/#post-installation","title":"Post-Installation","text":"<p>You may have noticed the <code>docker-compose.yml</code> file has the env variable <code>PENPOT_FLAGS</code> for the containers <code>penpot-frontend</code> and <code>penpot-backend</code>. By default we prefer to keep user registration disabled. This means you should probably remove the <code>disable-registration</code> flag the first time you start the service, create your users, and then re-add the flag to disable future registrations.</p>"},{"location":"linux/services/development/penpot/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/discord/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to Discord services.</p> <pre><code>mkdir ~/services/discord\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"linux/services/discord/free-games-notifier/","title":"Free Games Notifier","text":"<p>discord-free-games-notifier is a bot that notifies a channel whenever there's a free game on Steam or Epic Games.</p> <p>There is an official image for this service that we'll use: moonstarx/discord-free-games-notifier.</p>"},{"location":"linux/services/discord/free-games-notifier/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/discord/discord-free-games-notifier\n</code></pre>"},{"location":"linux/services/discord/free-games-notifier/#docker-compose","title":"Docker Compose","text":"<p>Free Games Notifier will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  bot:\n    image: moonstarx/discord-free-games-notifier:latest\n    restart: unless-stopped\n    volumes:\n      - ./data:/opt/app/data\n    environment:\n      TZ: America/Guayaquil\n      DISCORD_TOKEN: DISCORD_TOKEN_HERE\n      DISCORD_PREFIX: n!\n      DISCORD_OWNER_ID: OWNER_ID_HERE\n</code></pre> <p>Note</p> <p>Make sure to change <code>DISCORD_TOKEN_HERE</code> to your bot's Discord token.</p> <p>Note</p> <p>Make sure to change <code>OWNER_ID_HERE</code> to your Discord user's ID.</p>"},{"location":"linux/services/discord/free-games-notifier/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/discord/jda-music-bot/","title":"JDA Music Bot","text":"<p>jagrosh's MusicBot is a very powerful music bot written in Java with JDA.</p> <p>There is no official image for this service, so we'll use openjdk to run this service manually.</p>"},{"location":"linux/services/discord/jda-music-bot/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/discord/discord-jda-music-bot\n</code></pre> <p>We'll also need to download the latest version of the jar from here which will be downloaded inside an <code>app</code> folder where all the bot's data will be stored.</p> <pre><code>cd ~/services/discord/discord-jda-music-bot &amp;&amp; mkdir app &amp;&amp; cd app\nwget https://github.com/jagrosh/MusicBot/releases/download/0.4.0/JMusicBot-0.4.0.jar\nmv JMusicBot-0.4.0.jar JMusicBot.jar\n</code></pre> <p>Now, we should have a <code>JMusicBot.jar</code> file inside of <code>~/services/discord/discord-jda-music-bot/app</code>.</p>"},{"location":"linux/services/discord/jda-music-bot/#configuration","title":"Configuration","text":"<p>This bot requires its configuration to be saved in a text file. We'll create a file called <code>config.txt</code> with:</p> <pre><code>nano ~/services/discord/discord-jda-music-bot/app/config.txt\n</code></pre> <p>And its content should be as follows:</p> <pre><code>token=&lt;DISCORD_TOKEN_HERE&gt;\nowner=&lt;OWNER_ID_HERE&gt;\nprefix=%\ngame=\"DEFAULT\"\nstatus=ONLINE\nsonginstatus=true\naltprefix=\"NONE\"\nstayinchannel=true\nmaxtime=0\nupdatealerts=false\n</code></pre> <p>Note</p> <p>Make sure to change <code>OWNER_ID_HERE</code> to your Discord user's ID.</p> <p>Note</p> <p>Make sure to change <code>DISCORD_TOKEN_HERE</code> to your bot's Discord token.</p>"},{"location":"linux/services/discord/jda-music-bot/#docker-compose","title":"Docker Compose","text":"<p>JDA Music Bot will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  bot:\n    image: openjdk:23-slim\n    restart: unless-stopped\n    volumes:\n      - ./app:/opt/app\n    working_dir: /opt/app\n    command: ['java', '-Dnogui=true', '-jar', 'JMusicBot.jar']\n    environment:\n      TZ: America/Guayaquil\n</code></pre>"},{"location":"linux/services/discord/jda-music-bot/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/discord/text-to-speech/","title":"Text-to-Speech","text":"<p>discord-tts-bot is a bot that uses the Google Translate API to utter the messages you send to the bot in any language.</p> <p>There is an official image for this service that we'll use: moonstarx/discord-tts-bot.</p>"},{"location":"linux/services/discord/text-to-speech/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/discord/discord-tts-bot\n</code></pre>"},{"location":"linux/services/discord/text-to-speech/#docker-compose","title":"Docker Compose","text":"<p>Text-to-Speech will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  bot:\n    image: moonstarx/discord-tts-bot:latest\n    restart: unless-stopped\n    depends_on:\n      - redis\n    volumes:\n      - ./data:/opt/app/data\n    environment:\n      TZ: America/Guayaquil\n      DISCORD_TOKEN: DISCORD_TOKEN_HERE\n      DISCORD_PREFIX: $$\n      DISCORD_OWNER_ID: OWNER_ID_HERE\n      DISCORD_DEFAULT_DISCONNECT_TIMEOUT: 10\n      DISCORD_PROVIDER_TYPE: redis\n      DISCORD_REDIS_URL: redis://redis:6379\n\n  redis:\n    image: redis:latest\n    restart: unless-stopped\n    volumes:\n      - ./data:/data\n    command: redis-server --save 60 1 --loglevel warning\n    environment:\n      TZ: America/Guayaquil\n</code></pre> <p>Note</p> <p>Make sure to change <code>DISCORD_TOKEN_HERE</code> to your bot's Discord token.</p> <p>Note</p> <p>Make sure to change <code>OWNER_ID_HERE</code> to your Discord user's ID.</p>"},{"location":"linux/services/discord/text-to-speech/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/downloads/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to downloads services.</p> <pre><code>mkdir ~/services/downloads\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"linux/services/downloads/bazarr/","title":"Bazarr","text":"<p>Bazarr is an RSS downloader focused on subtitles.</p> <p>There is no official image for this service, so we'll use ghcr.io/linuxserver/bazarr.</p>"},{"location":"linux/services/downloads/bazarr/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/downloads/bazarr\n</code></pre>"},{"location":"linux/services/downloads/bazarr/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>downloads_external</code> network before defining the <code>docker-compose.yml</code> file. If you haven't created this network, you can do so with:</p> <pre><code>docker network create downloads_external\n</code></pre>"},{"location":"linux/services/downloads/bazarr/#docker-compose","title":"Docker Compose","text":"<p>Bazarr will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: ghcr.io/linuxserver/bazarr:latest\n    restart: unless-stopped\n    networks:\n      default:\n      downloads_external:\n      proxy_external:\n        aliases:\n          - bazarr\n    volumes:\n      - ./config:/config\n      - /media/usb_4tb:/media/usb_4tb\n      - /media/usb_8tb:/media/usb_8tb\n      - /media/sata_2tb/Downloads:/downloads\n    environment:\n      TZ: America/Guayaquil\n      PUID: 1000\n      PGID: 1000\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.bazarr.rule: Host(`bazarr.home.example.com`) ||\u00a0Host(`bazarr.vpn.example.com`)\n      traefik.http.routers.bazarr.entrypoints: local-https\n      traefik.http.routers.bazarr.tls: true\n      traefik.http.routers.bazarr.tls.certresolver: le\n      traefik.http.routers.bazarr.service: bazarr@docker\n      traefik.http.services.bazarr.loadbalancer.server.port: 6767\n\nnetworks:\n  downloads_external:\n    external: true\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>In the case of the <code>PUID</code> and <code>PGID</code> environment variables, <code>1000</code> corresponds to the user's UID and GID respectively. You can find the values for your own user by running <code>id $whoami</code>.</p>"},{"location":"linux/services/downloads/bazarr/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/downloads/bazarr/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/downloads/jdownloader/","title":"JDownloader","text":"<p>JDownloader is a download client that makes downloading from direct links a breeze.</p> <p>There is no official image for this service, so we'll use jlesage/jdownloader-2.</p>"},{"location":"linux/services/downloads/jdownloader/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/downloads/jdownloader\n</code></pre>"},{"location":"linux/services/downloads/jdownloader/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>downloads_external</code> network before defining the <code>docker-compose.yml</code> file. If you haven't created this network, you can do so with:</p> <pre><code>docker network create downloads_external\n</code></pre>"},{"location":"linux/services/downloads/jdownloader/#docker-compose","title":"Docker Compose","text":"<p>JDownloader will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: jlesage/jdownloader-2:latest\n    restart: unless-stopped\n    networks:\n      default:\n      downloads_external:\n      proxy_external:\n        aliases:\n          - jdownloader\n    ports:\n      - 3129:3129\n    volumes:\n      - ./config:/config\n      - /media/sata_2tb/Downloads:/output\n    environment:\n      TZ: America/Guayaquil\n      USER_ID: 1000\n      GROUP_ID: 1000\n      VNC_PASSWORD: BASIC_AUTH_PASSWORD\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.jdownloader.rule: Host(`jdownloader.home.example.com`) || Host(`jdownloader.vpn.example.com`)\n      traefik.http.routers.jdownloader.entrypoints: local-https\n      traefik.http.routers.jdownloader.tls: true\n      traefik.http.routers.jdownloader.tls.certresolver: le\n      traefik.http.routers.jdownloader.service: jdownloader@docker\n      traefik.http.services.jdownloader.loadbalancer.server.port: 5800\n\nnetworks:\n  downloads_external:\n    external: true\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>In the case of the <code>USER_ID</code> and <code>GROUP_ID</code> environment variables, <code>1000</code> corresponds to the user's UID and GID respectively. You can find the values for your own user by running <code>id $whoami</code>.</p> <p>Note</p> <p>Make sure to replace <code>BASIC_AUTH_PASSWORD</code> to something secret of your own choosing.</p>"},{"location":"linux/services/downloads/jdownloader/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/downloads/jdownloader/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/downloads/overseerr/","title":"Overseerr","text":"<p>Overseer is a media request tracker, useful for when you share a Plex server or similar with family and friends.</p> <p>There is no official image for this service, so we'll use ghcr.io/linuxserver/overseerr.</p>"},{"location":"linux/services/downloads/overseerr/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/downloads/overseerr\n</code></pre>"},{"location":"linux/services/downloads/overseerr/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>downloads_external</code> network before defining the <code>docker-compose.yml</code> file. If you haven't created this network, you can do so with:</p> <pre><code>docker network create downloads_external\n</code></pre>"},{"location":"linux/services/downloads/overseerr/#docker-compose","title":"Docker Compose","text":"<p>Overseerr will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: ghcr.io/linuxserver/overseerr:latest\n    restart: unless-stopped\n    networks:\n      default:\n      downloads_external:\n      proxy_external:\n        aliases:\n          - overseerr\n    extra_hosts:\n      - host.docker.internal:host-gateway\n    volumes:\n      - ./config:/config\n    environment:\n      TZ: America/Guayaquil\n      PUID: 1000\n      PGID: 1000\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.overseerr.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.overseerr.entrypoints: public\n      traefik.http.routers.overseerr.service: overseerr@docker\n      traefik.http.services.overseerr.loadbalancer.server.port: 5055\n\nnetworks:\n  downloads_external:\n    external: true\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>In the case of the <code>PUID</code> and <code>PGID</code> environment variables, <code>1000</code> corresponds to the user's UID and GID respectively. You can find the values for your own user by running <code>id $whoami</code>.</p> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/downloads/overseerr/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/downloads/overseerr/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/downloads/prowlarr/","title":"Prowlarr","text":"<p>Prowlarr is an indexer for -arr software.</p> <p>There is no official image for this service, so we'll use ghcr.io/linuxserver/prowlarr.</p>"},{"location":"linux/services/downloads/prowlarr/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/downloads/prowlarr\n</code></pre>"},{"location":"linux/services/downloads/prowlarr/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>downloads_external</code> network before defining the <code>docker-compose.yml</code> file. If you haven't created this network, you can do so with:</p> <pre><code>docker network create downloads_external\n</code></pre>"},{"location":"linux/services/downloads/prowlarr/#docker-compose","title":"Docker Compose","text":"<p>Prowlarr will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: ghcr.io/linuxserver/prowlarr:latest\n    restart: unless-stopped\n    networks:\n      default:\n      downloads_external:\n      proxy_external:\n        aliases:\n          - prowlarr\n    volumes:\n      - ./config:/config\n    environment:\n      TZ: America/Guayaquil\n      PUID: 1000\n      PGID: 1000\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.prowlarr.rule: Host(`prowlarr.home.example.com`) || Host(`prowlarr.vpn.example.com`)\n      traefik.http.routers.prowlarr.entrypoints: local-https\n      traefik.http.routers.prowlarr.tls: true\n      traefik.http.routers.prowlarr.tls.certresolver: le\n      traefik.http.routers.prowlarr.service: prowlarr@docker\n      traefik.http.services.prowlarr.loadbalancer.server.port: 9696\n\nnetworks:\n  downloads_external:\n    external: true\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>In the case of the <code>PUID</code> and <code>PGID</code> environment variables, <code>1000</code> corresponds to the user's UID and GID respectively. You can find the values for your own user by running <code>id $whoami</code>.</p>"},{"location":"linux/services/downloads/prowlarr/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/downloads/prowlarr/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/downloads/radarr/","title":"Radarr","text":"<p>Radarr is an RSS downloader focused on movies.</p> <p>There is no official image for this service, so we'll use ghcr.io/linuxserver/radarr.</p>"},{"location":"linux/services/downloads/radarr/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/downloads/radarr\n</code></pre>"},{"location":"linux/services/downloads/radarr/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>downloads_external</code> network before defining the <code>docker-compose.yml</code> file. If you haven't created this network, you can do so with:</p> <pre><code>docker network create downloads_external\n</code></pre>"},{"location":"linux/services/downloads/radarr/#docker-compose","title":"Docker Compose","text":"<p>Radarr will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: ghcr.io/linuxserver/radarr:latest\n    restart: unless-stopped\n    networks:\n      default:\n      downloads_external:\n      proxy_external:\n        aliases:\n          - radarr\n    volumes:\n      - ./config:/config\n      - /media/usb_4tb:/media/usb_4tb\n      - /media/usb_8tb:/media/usb_8tb\n      - /media/sata_2tb/Downloads:/downloads\n    environment:\n      TZ: America/Guayaquil\n      PUID: 1000\n      PGID: 1000\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.radarr.rule: Host(`radarr.home.example.com`) || Host(`radarr.vpn.example.com`)\n      traefik.http.routers.radarr.entrypoints: local-https\n      traefik.http.routers.radarr.tls: true\n      traefik.http.routers.radarr.tls.certresolver: le\n      traefik.http.routers.radarr.service: radarr@docker\n      traefik.http.services.radarr.loadbalancer.server.port: 7878\n\nnetworks:\n  downloads_external:\n    external: true\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>In the case of the <code>PUID</code> and <code>PGID</code> environment variables, <code>1000</code> corresponds to the user's UID and GID respectively. You can find the values for your own user by running <code>id $whoami</code>.</p>"},{"location":"linux/services/downloads/radarr/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/downloads/radarr/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/downloads/sonarr/","title":"Sonarr","text":"<p>Sonarr is an RSS downloader focused on TV Shows.</p> <p>There is no official image for this service, so we'll use ghcr.io/linuxserver/sonarr.</p>"},{"location":"linux/services/downloads/sonarr/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/downloads/sonarr\n</code></pre>"},{"location":"linux/services/downloads/sonarr/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>downloads_external</code> network before defining the <code>docker-compose.yml</code> file. If you haven't created this network, you can do so with:</p> <pre><code>docker network create downloads_external\n</code></pre>"},{"location":"linux/services/downloads/sonarr/#docker-compose","title":"Docker Compose","text":"<p>Sonarr will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: ghcr.io/linuxserver/sonarr:latest\n    restart: unless-stopped\n    networks:\n      default:\n      downloads_external:\n      proxy_external:\n        aliases:\n          - sonarr\n    volumes:\n      - ./config:/config\n      - /media/usb_4tb:/media/usb_4tb\n      - /media/usb_8tb:/media/usb_8tb\n      - /media/sata_2tb/Downloads:/downloads\n    environment:\n      TZ: America/Guayaquil\n      PUID: 1000\n      PGID: 1000\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.sonarr.rule: Host(`sonarr.home.example.com`) || Host(`sonarr.vpn.example.com`)\n      traefik.http.routers.sonarr.entrypoints: local-https\n      traefik.http.routers.sonarr.tls: true\n      traefik.http.routers.sonarr.tls.certresolver: le\n      traefik.http.routers.sonarr.service: sonarr@docker\n      traefik.http.services.sonarr.loadbalancer.server.port: 8989\n\nnetworks:\n  downloads_external:\n    external: true\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>In the case of the <code>PUID</code> and <code>PGID</code> environment variables, <code>1000</code> corresponds to the user's UID and GID respectively. You can find the values for your own user by running <code>id $whoami</code>.</p>"},{"location":"linux/services/downloads/sonarr/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/downloads/sonarr/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/downloads/transmission/","title":"Transmission","text":"<p>Transmission is a BitTorrent client.</p> <p>There is no official image for this service, so we'll use ghcr.io/linuxserver/transmission.</p>"},{"location":"linux/services/downloads/transmission/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/downloads/transmission\n</code></pre> <p>We'll need to download a GUI for Transmission manually. For this, inside the newly created folder, run the following commands:</p> <pre><code>curl -OL https://github.com/johman10/flood-for-transmission/releases/download/latest/flood-for-transmission.zip\nunzip flood-for-transmission.zip &amp;&amp; rm flood-for-transmission.zip\nmv flood-for-transmission web-ui\n</code></pre>"},{"location":"linux/services/downloads/transmission/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>downloads_external</code> network before defining the <code>docker-compose.yml</code> file. If you haven't created this network, you can do so with:</p> <pre><code>docker network create downloads_external\n</code></pre>"},{"location":"linux/services/downloads/transmission/#docker-compose","title":"Docker Compose","text":"<p>Transmission will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: ghcr.io/linuxserver/transmission:latest\n    restart: unless-stopped\n    networks:\n      default:\n      downloads_external:\n      proxy_external:\n        aliases:\n          - transmission\n    ports:\n      - 51413:51413\n      - 51413:51413/udp\n    volumes:\n      - ./config:/config\n      - ./watch:/watch\n      - ./web-ui:/flood-for-transmission\n      - /media/sata_2tb/Downloads:/downloads\n    environment:\n      TZ: America/Guayaquil\n      TRANSMISSION_WEB_HOME: /flood-for-transmission/\n      USER: BASIC_AUTH_USER\n      PASS: BASIC_AUTH_PASSWORD\n      PUID: 1000\n      PGID: 1000\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.transmission.rule: Host(`transmission.home.example.com`) || Host(`transmission.vpn.example.com`)\n      traefik.http.routers.transmission.entrypoints: local-https\n      traefik.http.routers.transmission.tls: true\n      traefik.http.routers.transmission.tls.certresolver: le\n      traefik.http.routers.transmission.service: transmission@docker\n      traefik.http.services.transmission.loadbalancer.server.port: 9091\n\nnetworks:\n  downloads_external:\n    external: true\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>In the case of the <code>PUID</code> and <code>PGID</code> environment variables, <code>1000</code> corresponds to the user's UID and GID respectively. You can find the values for your own user by running <code>id $whoami</code>.</p> <p>Note</p> <p>Make sure to replace <code>BASIC_AUTH_USER</code> and <code>BASIC_AUTH_PASSWORD</code> to something secret of your own choosing.</p> <p>Note</p> <p>You may change the contents of <code>transmission-config/settings.json</code> as long as the container is stopped.</p>"},{"location":"linux/services/downloads/transmission/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/downloads/transmission/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/games/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to games services.</p> <pre><code>mkdir ~/services/games\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"linux/services/games/assetto-corsa/","title":"Assetto Corsa","text":"<p>Assetto Corsa is a realistic racing simulator.</p> <p>This game server has a community made server manager available on Docker Hub, however, I have made a small fork of this to update the source for SteamCMD since I've been having quite a lot of trouble getting it to work.</p> <p>This fork is available on ghcr.io/moonstar-x/assetto-server-managers, which is the image we'll use for this.</p>"},{"location":"linux/services/games/assetto-corsa/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/games/assetto-corsa\n</code></pre>"},{"location":"linux/services/games/assetto-corsa/#docker-compose","title":"Docker Compose","text":"<p>Assetto Corsa will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: ghcr.io/moonstar-x/assetto-server-manager:master\n    restart: unless-stopped\n    user: 1000:1000\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - assetto_corsa\n    ports:\n      - 9600:9600\n      - 9600:9600/udp\n      - 8081:8081\n    volumes:\n      - ./server:/home/assetto/server-manager/assetto\n      - ./data:/home/assetto/server-manager\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.assetto_corsa.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.assetto_corsa.entrypoints: public\n      traefik.http.routers.assetto_corsa.service: assetto_corsa@docker\n      traefik.http.services.assetto_corsa.loadbalancer.server.port: 8772\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Warning</p> <p>Make sure to create the <code>data</code> and <code>server</code> folder before starting the container, otherwise you'll have some problems with the server data being saved.</p> <p>Note</p> <p>In the case of the <code>user</code> directive, <code>1000:1000</code> corresponds to the user's <code>UID:GID</code>. You can find the values for your own user by running <code>id $whoami</code>.</p> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/games/assetto-corsa/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/games/assetto-corsa/#configuration","title":"Configuration","text":"<p>Create a config file inside <code>data/config.yml</code>:</p> <pre><code>nano data/config.yml\n</code></pre> <p>And paste the following:</p> <pre><code>steam:\n  username: STEAM_USER\n  password: STEAM_PASS\n  install_path: assetto\n  executable_path: acServer\n  force_update: false\n\nhttp:\n  hostname: 0.0.0.0:8772\n  session_key: RANDOMLY_GENERATE_THIS\n  server_manager_base_URL:\n  session_store_type: cookie\n  session_store_path: ''\n\n  tls:\n    enabled: false\n    cert_path: ''\n    key_path: ''\n\nmonitoring:\n  enabled: true\n\nstore:\n  type: boltdb\n  path: server_manager.db\n  shared_data_path:\n  scheduled_event_check_loop: 0s\n\naccounts:\n  admin_password_override:\n\nlive_map:\n  refresh_interval_ms: 500\n\nserver:\n  audit_logging: true\n  performance_mode: false\n  dont_open_browser: false\n  scan_content_folder_for_chanes: true\n  use_car_name_cache: true\n  persist_mid_session_results: false\n  plugins:\n\nchampionships:\n  recaptcha:\n    site_key:\n    secret_key:\n\nlua:\n  enabled: false\n</code></pre> <p>Note</p> <p>Make sure to replace <code>STEAM_USER</code> and <code>STEAM_PASS</code> with your steam account's information. I recommend you create a separate Steam account with Steam Guard disabled. You don't need an Assetto Corsa license to download the dedicated server.</p>"},{"location":"linux/services/games/assetto-corsa/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/games/assetto-corsa/#joining-the-server","title":"Joining the Server","text":"<p>If you have set the server to be LAN only, you may join your server by going to the following URL:</p> <pre><code>https://acstuff.ru/s/q:race/online/join?ip=&lt;IP&gt;&amp;httpPort=8081\n</code></pre> <p>Make sure the clients have AC Content Manager to be able to access through that URL.</p>"},{"location":"linux/services/games/romm/","title":"Romm","text":"<p>Romm is a frontend to manage and even play emulator roms.</p> <p>There is an official image for this service that we'll use: rommapp/romm.</p>"},{"location":"linux/services/games/romm/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/games/romm\n</code></pre>"},{"location":"linux/services/games/romm/#docker-compose","title":"Docker Compose","text":"<p>Romm will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: rommapp/romm:latest\n    restart: unless-stopped\n    depends_on:\n      - db\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - romm\n    volumes:\n      - ./resources:/romm/resources\n      - ./redis:/romm/redis-data\n      - /media/sata_2tb/Retroid:/romm/library\n      - ./assets:/romm/assets\n      - ./config:/romm/config\n    environment:\n      TZ: America/Guayaquil\n      DB_HOST: db\n      DB_NAME: romm\n      DB_USER: DATABASE_USER\n      DB_PASSWD: DATABASE_PASSWORD\n      IGDB_CLIENT_ID: IGDB_CLIENT_ID\n      IGDB_CLIENT_SECRET: IGDB_CLIENT_SECRET\n      ROMM_AUTH_SECRET_KEY: AUTH_SECRET_KEY\n      ROMM_AUTH_USERNAME: AUTH_USERNAME\n      ROMM_AUTH_PASSWORD: AUTH_PASSWORD\n      DISABLE_CSRF_PROTECTION: true\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.romm.rule: Host(`roms.home.example.com`) || Host(`roms.vpn.example.com`)\n      traefik.http.routers.romm.entrypoints: local-https\n      traefik.http.routers.romm.tls: true\n      traefik.http.routers.romm.tls.certresolver: le\n      traefik.http.routers.romm.service: romm@docker\n      traefik.http.services.romm.loadbalancer.server.port: 8080\n\n  db:\n    image: mariadb:10\n    restart: unless-stopped\n    volumes:\n      - ./data:/var/lib/mysql\n    environment:\n      TZ: America/Guayaquil\n      MYSQL_ROOT_PASSWORD: DATABASE_PASSWORD\n      MYSQL_DATABASE: romm\n      MYSQL_USER: DATABASE_USER\n      MYSQL_PASSWORD: DATABASE_PASSWORD\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Make sure to change <code>DATABASE_USER</code>, <code>DATABASE_PASSWORD</code> to a custom secret value.</p> <p>Note</p> <p>Make sure to change <code>AUTH_SECRET_KEY</code> to a custom secret value. You can generate this with <code>openssl rand -hex 32</code>. Also replace <code>AUTH_USERNAME</code> and <code>AUTH_PASSWORD</code> to something secret.</p> <p>Note</p> <p>Make sure to change <code>IGDB_CLIENT_ID</code> and <code>IGDB_CLIENT_SECRET</code> with a client ID and secret generated from twitch.tv.</p>"},{"location":"linux/services/games/romm/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/games/romm/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/games/teamspeak/","title":"TeamSpeak 3","text":"<p>TeamSpeak 3 is a gaming focused voice server.</p> <p>There is an official image for this service that we'll use: teamspeak.</p>"},{"location":"linux/services/games/teamspeak/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/games/teamspeak\n</code></pre>"},{"location":"linux/services/games/teamspeak/#docker-compose","title":"Docker Compose","text":"<p>TeamSpeak 3 will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  server:\n    image: teamspeak:latest\n    restart: unless-stopped\n    depends_on:\n      - db\n    ports:\n      - 9987:9987/udp\n      - 10011:10011\n      - 30033:30033\n    volumes:\n      - ./data:/var/ts3server\n    environment:\n      TZ: America/Guayaquil\n      TS3SERVER_DB_PLUGIN: ts3db_mariadb\n      TS3SERVER_DB_SQLCREATEPATH: create_mariadb\n      TS3SERVER_DB_HOST: db\n      TS3SERVER_DB_USER: root\n      TS3SERVER_DB_NAME: teamspeak\n      TS3SERVER_DB_PASSWORD: DATABASE_PASSWORD\n      TS3SERVER_DB_WAITUNTILREADY: 30\n      TS3SERVER_LICENSE: accept\n\n  db:\n    image: mariadb:10\n    restart: unless-stopped\n    volumes:\n      - ./db:/var/lib/mysql\n    environment:\n      TZ: America/Guayaquil\n      MYSQL_ROOT_PASSWORD: DATABASE_PASSWORD\n      MYSQL_DATABASE: teamspeak\n</code></pre> <p>Note</p> <p>Make sure to change <code>DATABASE_PASSWORD</code> to a custom secret value.</p>"},{"location":"linux/services/games/teamspeak/#getting-server-auth-tokens","title":"Getting Server Auth Tokens","text":"<p>After the container has been created, check its logs and save the <code>serveradmin</code> login details. This is very important in case you get locked out of your server or if you need to change some settings through ServerQuery.</p> <p>Use:</p> <pre><code>docker logs teamspeak_teamspeak_1 --follow\n</code></pre> <p>You should also find here the privilege key to set up your user as the server administrator.</p>"},{"location":"linux/services/games/teamspeak/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/management/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to management services.</p> <pre><code>mkdir ~/services/management\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"linux/services/management/homepage/","title":"Homepage","text":"<p>Homepage is a homepage for your server, it allows to have links to your self hosted services. It also has some nice integrations with some of these services so it can display information about them from this homepage.</p> <p>There is an official image for this service that we'll use: ghcr.io/gethomepage/homepage.</p>"},{"location":"linux/services/management/homepage/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/management/homepage\n</code></pre>"},{"location":"linux/services/management/homepage/#docker-compose","title":"Docker Compose","text":"<p>Homepage will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web_home:\n    image: ghcr.io/gethomepage/homepage:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - homepage-home\n    volumes:\n      - ./config:/app/config\n      - ./images:/app/public/images\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - /media/sata_2tb:/media/sata_2tb:ro\n      - /media/usb_4tb:/media/usb_4tb:ro\n      - /media/usb_4tb_2:/media/usb_4tb_2:ro\n      - /media/usb_8tb:/media/usb_8tb:ro\n    environment:\n      TZ: America/Guayaquil\n      HOMEPAGE_VAR_DOMAIN: home.example.com\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.homepage-home.rule: Host(`home.example.com`)\n      traefik.http.routers.homepage-home.entrypoints: local-https\n      traefik.http.routers.homepage-home.service: homepage-home@docker\n      traefik.http.services.homepage-home.loadbalancer.server.port: 3000\n      traefik.http.routers.homepage-home.tls: true\n      traefik.http.routers.homepage-home.tls.certresolver: le\n\n  web_vpn:\n    image: ghcr.io/gethomepage/homepage:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - homepage-vpn\n    volumes:\n      - ./config:/app/config\n      - ./images:/app/public/images\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - /media/sata_2tb:/media/sata_2tb:ro\n      - /media/usb_4tb:/media/usb_4tb:ro\n      - /media/usb_4tb_2:/media/usb_4tb_2:ro\n      - /media/usb_8tb:/media/usb_8tb:ro\n    environment:\n      TZ: America/Guayaquil\n      HOMEPAGE_VAR_DOMAIN: vpn.example.com\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.homepage-vpn.rule: Host(`vpn.example.com`)\n      traefik.http.routers.homepage-vpn.entrypoints: local-https\n      traefik.http.routers.homepage-vpn.service: homepage-vpn@docker\n      traefik.http.services.homepage-vpn.loadbalancer.server.port: 3000\n      traefik.http.routers.homepage-vpn.tls: true\n      traefik.http.routers.homepage-vpn.tls.certresolver: le\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre>"},{"location":"linux/services/management/homepage/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/management/homepage/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/management/portainer/","title":"Portainer","text":"<p>Portainer is a web UI for Docker which allows us to have an insight on all the containers running on our server.</p> <p>There is an official image for this service that we'll use: portainer/portainer-ce.</p>"},{"location":"linux/services/management/portainer/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/management/portainer\n</code></pre>"},{"location":"linux/services/management/portainer/#docker-compose","title":"Docker Compose","text":"<p>Portainer will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: portainer/portainer-ce:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - portainer\n    ports:\n      - 8000:8000\n    volumes:\n      - ./data:/data\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.portainer.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.portainer.entrypoints: public\n      traefik.http.routers.portainer.service: portainer@docker\n      traefik.http.services.portainer.loadbalancer.server.port: 9000\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/management/portainer/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/management/portainer/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/media/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to media services.</p> <pre><code>mkdir ~/services/media\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"linux/services/media/freshrss/","title":"FreshRSS","text":"<p>FreshRSS is an RSS feed reader.</p> <p>There is no official image for this service, so we'll use ghcr.io/linuxserver/freshrss.</p>"},{"location":"linux/services/media/freshrss/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/media/freshrss\n</code></pre>"},{"location":"linux/services/media/freshrss/#docker-compose","title":"Docker Compose","text":"<p>FreshRSS will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: ghcr.io/linuxserver/freshrss:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - freshrss\n    volumes:\n      - ./data:/config\n    environment:\n      TZ: America/Guayaquil\n      PUID: 1000\n      PGID: 1000\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.freshrss.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.freshrss.entrypoints: public\n      traefik.http.routers.freshrss.service: freshrss@docker\n      traefik.http.services.freshrss.loadbalancer.server.port: 80\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>In the case of the <code>PUID</code> and <code>PGID</code> environment variables, <code>1000</code> corresponds to the user's UID and GID respectively. You can find the values for your own user by running <code>id $whoami</code>.</p> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/media/freshrss/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/media/freshrss/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/media/jellyfin/","title":"Jellyfin","text":"<p>Jellyfin is an open source version of the famous media server Emby.</p> <p>There is an official image for this service that we'll use: jellyfin/jellyfin.</p>"},{"location":"linux/services/media/jellyfin/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/media/jellyfin\n</code></pre>"},{"location":"linux/services/media/jellyfin/#docker-compose","title":"Docker Compose","text":"<p>Jellyfin will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: jellyfin/jellyfin:latest\n    restart: unless-stopped\n    user: 1000:1000\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - jellyfin\n    volumes:\n      - ./jellyfin-config:/config\n      - ./jellyfin-cache:/cache\n      - /media/usb_4tb_2/Jellyfin:/media\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.jellyfin.rule: Host(`jellyfin.home.example.com`) || Host(`jellyfin.vpn.example.com`)\n      traefik.http.routers.jellyfin.entrypoints: local-https\n      traefik.http.routers.jellyfin.tls: true\n      traefik.http.routers.jellyfin.tls.certresolver: le\n      traefik.http.routers.jellyfin.service: jellyfin@docker\n      traefik.http.services.jellyfin.loadbalancer.server.port: 8096\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>In the case of the <code>user</code> directive, <code>1000:1000</code> corresponds to the user's <code>UID:GID</code>. You can find the values for your own user by running <code>id $whoami</code>.</p>"},{"location":"linux/services/media/jellyfin/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/media/jellyfin/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/media/kavita/","title":"Kavita","text":"<p>Kavita is an eBook server for PDFs and EPUBs.</p> <p>There is an official image for this service that we'll use: jvmilazz0/kavita.</p>"},{"location":"linux/services/media/kavita/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/media/kavita\n</code></pre>"},{"location":"linux/services/media/kavita/#docker-compose","title":"Docker Compose","text":"<p>Kavita will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: jvmilazz0/kavita:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - kavita\n    volumes:\n      - ./data:/kavita/config\n      - /media/sata_2tb/Books:/books\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.kavita.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.kavita.entrypoints: public\n      traefik.http.routers.kavita.service: kavita@docker\n      traefik.http.services.kavita.loadbalancer.server.port: 5000\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/media/kavita/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/media/kavita/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/media/pigallery-2/","title":"PiGallery 2","text":"<p>PiGallery 2 is a simple image gallery.</p> <p>There is an official image for this service that we'll use: bpatrik/pigallery2.</p>"},{"location":"linux/services/media/pigallery-2/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/media/pigallery2\n</code></pre>"},{"location":"linux/services/media/pigallery-2/#docker-compose","title":"Docker Compose","text":"<p>PiGallery 2 will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: bpatrik/pigallery2:1.9.5\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - pigallery\n    volumes:\n      - ./config:/app/data/config\n      - ./data:/app/data/db\n      - /media/usb_4tb_2/Gallery/Caches:/app/data/tmp\n      - /media/usb_4tb_2/Gallery/Images:/app/data/images:ro\n    environment:\n      TZ: America/Guayaquil\n      NODE_ENV: production\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.pigallery.rule: Host(`gallery.home.example.com`) || Host(`gallery.vpn.example.com`)\n      traefik.http.routers.pigallery.entrypoints: local-https\n      traefik.http.routers.pigallery.tls: true\n      traefik.http.routers.pigallery.tls.certresolver: le\n      traefik.http.routers.pigallery.service: pigallery@docker\n      traefik.http.services.pigallery.loadbalancer.server.port: 80\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre>"},{"location":"linux/services/media/pigallery-2/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/media/pigallery-2/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/media/plex/","title":"Plex","text":"<p>Plex is one of the most popular media server options out there.</p> <p>There is an official image for this service that we'll use: plexinc/pms-docker.</p>"},{"location":"linux/services/media/plex/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/media/plex\n</code></pre>"},{"location":"linux/services/media/plex/#docker-compose","title":"Docker Compose","text":"<p>Plex will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: plexinc/pms-docker:latest\n    restart: unless-stopped\n    network_mode: host\n    volumes:\n      - ./config:/config\n      - ./transcode:/transcode\n      - /media/usb_4tb:/media/usb_4tb\n      - /media/usb_8tb:/media/usb_8tb\n      - /media/sata_2tb:/media/sata_2tb\n    environment:\n      TZ: America/Guayaquil\n      PLEX_UID: 1000\n      PLEX_GID: 1000\n</code></pre> <p>Note</p> <p>In the case of the <code>PLEX_UID</code> and <code>PLEX_GID</code> environment variables, <code>1000</code> corresponds to the user's UID and GID respectively. You can find the values for your own user by running <code>id $whoami</code>.</p>"},{"location":"linux/services/media/plex/#post-installation","title":"Post-Installation","text":"<p>We'll need to allow the service's port on our firewall.</p> <pre><code>sudo ufw allow 32400/tcp\n</code></pre>"},{"location":"linux/services/media/plex/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/media/reddit-slideshow/","title":"Reddit Slideshow","text":"<p>Reddit Slideshow is a web app that can render image posts from Reddit as a slideshow.</p> <p>I made a little fork of the original repo and added a Docker image which can be publicly used code.moonstar-x.dev/public/reddit-slideshow.</p>"},{"location":"linux/services/media/reddit-slideshow/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/media/reddit-slideshow\n</code></pre> <p>Create a <code>settings.json</code> file and add something like this:</p> <pre><code>{\n  \"slideshows\": [\n    \"funny\",\n    [\"memes\", \"pics\"]\n  ]\n}\n</code></pre> <p>You can add the subreddits you want as a string for single subreddits or as an array for multireddit.</p>"},{"location":"linux/services/media/reddit-slideshow/#docker-compose","title":"Docker Compose","text":"<p>Reddit Slideshow will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: code.moonstar-x.dev/public/reddit-slideshow:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - reddit_slideshow\n    volumes:\n      - ./settings.json:/usr/share/nginx/html/settings.json\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.reddit_slideshow.rule: Host(`slideshow.home.example.com`) || Host(`slideshow.vpn.example.com`)\n      traefik.http.routers.reddit_slideshow.entrypoints: local-https\n      traefik.http.routers.reddit_slideshow.tls: true\n      traefik.http.routers.reddit_slideshow.tls.certresolver: le\n      traefik.http.routers.reddit_slideshow.service: reddit_slideshow@docker\n      traefik.http.services.reddit_slideshow.loadbalancer.server.port: 8080\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre>"},{"location":"linux/services/media/reddit-slideshow/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/media/reddit-slideshow/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/media/restreamer/","title":"Restreamer","text":"<p>Restreamer allows you to stream any type of media into multiple platforms simultaneously.</p> <p>There is an official image for this service that we'll use: datarhei/restreamer.</p>"},{"location":"linux/services/media/restreamer/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/media/restreamer\n</code></pre>"},{"location":"linux/services/media/restreamer/#docker-compose","title":"Docker Compose","text":"<p>Restreamer will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: datarhei/restreamer:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - restreamer\n    ports:\n      - 1935:1935\n    volumes:\n      - ./config:/core/config\n      - ./data:/core/data\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.restreamer.rule: Host(`stream.home.example.com`) || Host(`stream.vpn.example.com`)\n      traefik.http.routers.restreamer.entrypoints: local-https\n      traefik.http.routers.restreamer.tls: true\n      traefik.http.routers.restreamer.tls.certresolver: le\n      traefik.http.routers.restreamer.service: restreamer@docker\n      traefik.http.services.restreamer.loadbalancer.server.port: 8080\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre>"},{"location":"linux/services/media/restreamer/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/media/restreamer/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/media/tautulli/","title":"Tautulli","text":"<p>Tautulli is a monitoring tool for Plex.</p> <p>There is an official image for this service that we'll use tautulli/tautulli.</p>"},{"location":"linux/services/media/tautulli/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/media/tautulli\n</code></pre>"},{"location":"linux/services/media/tautulli/#docker-compose","title":"Docker Compose","text":"<p>Tautulli will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: tautulli/tautulli:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - tautulli\n    volumes:\n      - ./config:/config\n    environment:\n      TZ: America/Guayaquil\n      PUID: 1000\n      PGID: 1000\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.tautulli.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.tautulli.entrypoints: public\n      traefik.http.routers.tautulli.service: tautulli@docker\n      traefik.http.services.tautulli.loadbalancer.server.port: 8181\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>In the case of the <code>PUID</code> and <code>PGID</code> environment variables, <code>1000</code> corresponds to the user's UID and GID respectively. You can find the values for your own user by running <code>id $whoami</code>.</p> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/media/tautulli/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/media/tautulli/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/networking/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to networking services.</p> <pre><code>mkdir ~/services/networking\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"linux/services/networking/cloudflared/","title":"Cloudflared","text":"<p>Warning</p> <p>You should set up Traefik first before setting this up.</p> <p>Cloudflared is a tunnel client that allows you to expose services in your network through a secure tunnel with Cloudflare.</p> <p>There is an official image for this service that we'll use: cloudflare/cloudflared.</p> <p>Note</p> <p>In order to use this service you need to have an active domain registered and configured to use Cloudflare as it's DNS zone manager.</p>"},{"location":"linux/services/networking/cloudflared/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/networking/cloudflared\n</code></pre>"},{"location":"linux/services/networking/cloudflared/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>tunnel_external</code> network before defining the <code>docker-compose.yml</code> file. If you haven't created this network, you can do so with:</p> <pre><code>docker network create tunnel_external\n</code></pre>"},{"location":"linux/services/networking/cloudflared/#creating-a-tunnel","title":"Creating a Tunnel","text":"<p>Before you can start the tunnel client, you need to acquire a token that will authenticate you to Cloudflare.</p> <p>First, visit the following page: https://one.dash.cloudflare.com and log in to your account.</p> <p>In the dashboard, click <code>Networks &gt; Tunnels</code> and click the <code>Create a tunnel</code> button.</p> <p></p> <p>Select <code>Cloudflared</code> and click <code>Next</code>.</p> <p></p> <p>Name your tunnel and click in <code>Save tunnel</code>.</p> <p></p> <p>Select <code>Docker</code> as the environment and copy the command shown below. You'll notice this command shows a token inside, you should copy this value and continue by running your Docker Compose stack with this value set as the container's <code>TUNNEL_TOKEN</code> environment variable.</p> <p>You should notice that when doing this, the webpage will update with the detected connector. If you see this, it means that your container is working perfectly. Finally click <code>Next</code>.</p> <p></p> <p>Next, create a temporary route. Cloudflare requires you to create one when creating the tunnel, however we'll remove it afterwards because we do not need it for now.</p> <p>You can leave the subdomain as anything you want (just keep in mind that Cloudflare will automatically create a record with that subdomain name, so if you have another record with that name it may get replaced).</p> <p>Choose your domain to use, and leave the path empty. As the service you should choose <code>HTTP</code> as the type and set the <code>URL</code> to anything.</p> <p>Finally click <code>Save tunnel</code>.</p> <p></p> <p>You'll then be taken back to the tunnel dashboard. Select your newly created tunnel and click on the <code>Configure</code> button. You'll then see a tab that says <code>Public Hostname</code>, click on it and you'll now see a list of your hostnames defined.</p> <p>Delete all your hostnames and set the <code>Catch-all rule</code> to <code>http://traefik:8000</code>.</p> <p>Your hostname definition should look like this:</p> <p></p> <p>Now, check your URL, you should see something along the lines of <code>/networks/tunnels/cfd_tunnel/:UUID</code> as shown in the following image:</p> <p></p> <p>Copy this uuid and paste it somewhere in the following way:</p> <pre><code>UUID.cfargotunnel.com\n</code></pre> <p>So if your UUID is <code>abcd-efgh-ijkl</code> you should have the following text ready:</p> <pre><code>abcd-efgh-ijkl.cfargotunnel.com\n</code></pre> <p>Head over to your domain's DNS Dashboard and create a new rule with the following info:</p> <pre><code>Type: CNAME\nName: *\nTarget: abcd-efgh-ijkl.cfargotunnel.com\nProxied: Enabled\nTTL: Auto\n</code></pre> <p>And done, you should now have a wildcard definition for your domain that will point to your Traefik reverse proxy.</p>"},{"location":"linux/services/networking/cloudflared/#docker-compose","title":"Docker Compose","text":"<p>Cloudflared will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  tunnel:\n    image: cloudflare/cloudflared:latest\n    restart: unless-stopped\n    networks:\n      - default\n      - tunnel_external\n    command: tunnel run\n    environment:\n      TZ: America/Guayaquil\n      TUNNEL_TOKEN: TUNNEL_TOKEN_HERE\n\nnetworks:\n  tunnel_external:\n    external: true\n</code></pre> <p>Note</p> <p>Make sure to change <code>TUNNEL_TOKEN_HERE</code> to your actual tunnel token acquired from Cloudflare.</p>"},{"location":"linux/services/networking/cloudflared/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/networking/samba/","title":"Samba","text":"<p>Samba lets your Linux based server share files and folders on a Windows File Sharing Workgroup using the same protocol (SMB/CIFS), this is pretty useful when you need to share files between computers on your network. This also helps to allow your files to be accessed through the Internet (although it should only be done through a VPN for security purposes).</p> <p>There is no official image for this service, so we'll use ghcr.io/servercontainers/samba.</p>"},{"location":"linux/services/networking/samba/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/networking/samba\n</code></pre>"},{"location":"linux/services/networking/samba/#docker-compose","title":"Docker Compose","text":"<p>Samba will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  server:\n    image: ghcr.io/servercontainers/samba:smbd-only-latest\n    restart: unless-stopped\n    network_mode: host\n    volumes:\n      - /media:/media\n      - ~/:/home\n    environment:\n      TZ: America/Guayaquil\n\n      SAMBA_CONF_LOG_LEVEL: 3\n      AVAHI_DISABLE: disabled\n      WSDD2_DISABLE: disabled\n\n      ACCOUNT_foo: 'foo:1000:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:86C156FC198B358CCCF6278D8BD49B6A:[U          ]:LCT-65FF474F:'\n      UID_foo: 1000\n\n      SAMBA_VOLUME_CONFIG_downloads: |\n        [downloads]\n          comment = Downloads directory.\n          path = /media/sata_2tb/Downloads\n          available = yes\n          read only = no\n          browsable = yes\n          writeable = yes\n          create mask = 0777\n          directory mask = 0777\n          public = no\n          guest ok = no\n          hosts deny = 192.168.195.\n\n      SAMBA_VOLUME_CONFIG_home: |\n        [home]\n          comment = Home.\n          path = /home\n          available = yes\n          read only = no\n          browsable = yes\n          writeable = yes\n          force user = foo\n          public = no\n          guest ok = no\n          hosts deny = 192.168.195.\n</code></pre> <p>Feel free to edit the volumes and the volume configs at the bottom to your liking.</p> <p>You may have noticed the weird hash for the env variable <code>ACCOUNT_foo</code>, you can generate one for your own use case by running:</p> <pre><code>docker run -it --rm ghcr.io/servercontainers/samba:smbd-only-latest create-hash.sh\n</code></pre> <p>This will generate a hash that you can use instead of adding your password in plaintext.</p> <p>The shares are defined through environment variables prefixed by <code>SAMBA_VOLUME_CONFIG</code>, you can create as many as you need. Same story for <code>ACCOUNT</code> and <code>UID</code> which are used to define accounts with access to the share and their respective UID.</p>"},{"location":"linux/services/networking/samba/#post-installation","title":"Post-Installation","text":"<p>We'll need to allow the service's port on our firewall.</p> <pre><code>sudo ufw allow 455/tcp\n</code></pre>"},{"location":"linux/services/networking/samba/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/networking/traefik/","title":"Traefik","text":"<p>Traefik is a reverse proxy with a first class integration with Docker.</p> <p>There is an official image for this service that we'll use: traefik.</p>"},{"location":"linux/services/networking/traefik/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/networking/traefik\n</code></pre>"},{"location":"linux/services/networking/traefik/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>tunnel_external</code> and <code>proxy_external</code> networks before defining the <code>docker-compose.yml</code> file. If you haven't created these networks, you can do so with:</p> <pre><code>docker network create tunnel_external\ndocker network create proxy_external\n</code></pre>"},{"location":"linux/services/networking/traefik/#configuration","title":"Configuration","text":"<p>Create a <code>traefik.yml</code> file with the following content:</p> <pre><code>global:\n  checkNewVersion: true\n\nlog:\n  level: DEBUG\n\napi:\n  insecure: true\n  dashboard: true\n\nproviders:\n  docker:\n    exposedByDefault: false\n    watch: true\n  file:\n    fileName: /etc/traefik/traefik.yaml\n    watch: true\n\nentryPoints:\n  public:\n    address: :8000\n  local-http:\n    address: :8020\n  local-https:\n    address: :8040\n\ncertificatesresolvers:\n  le:\n    acme:\n      dnschallenge:\n        provider: cloudflare\n        delaybeforecheck: 0\n        resolvers: 1.1.1.1\n      email: YOUR_EMAIL_HERE\n      storage: /letsencrypt/acme.json\n</code></pre> <p>Note</p> <p>Make sure to replace <code>YOUR_EMAIL_HERE</code> with your actual email.</p> <p>As a side note, we're using TLS in certain services that point to local IP addresses. I decided to go this route to keep using my own existing domain while keeping HTTPS active. We're using a DNS challenge which requires you to provide a Cloudflare API token with edit access for your DNS zones.</p> <p>If it does not apply to you, you may want to explore different challenges such as HTTP or TLS, or just serve your content through HTTP altogether.</p>"},{"location":"linux/services/networking/traefik/#docker-compose","title":"Docker Compose","text":"<p>Traefik will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  proxy:\n    image: traefik:latest\n    restart: unless-stopped\n    extra_hosts:\n      - host.docker.internal:host-gateway\n    networks:\n      default:\n      tunnel_external:\n        aliases:\n          - traefik\n      proxy_external:\n        aliases:\n          - traefik\n    ports:\n      - 80:8020\n      - 443:8040\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./traefik.yml:/etc/traefik/traefik.yaml\n      - ./letsencrypt:/letsencrypt\n    environment:\n      TZ: America/Guayaquil\n      CF_DNS_API_TOKEN: CLOUDFLARE_API_TOKEN\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.traefik.rule: Host(`proxy.home.example.com`) || Host(`proxy.vpn.example.com`)\n      traefik.http.routers.traefik.entrypoints: local-https\n      traefik.http.routers.traefik.tls: true\n      traefik.http.routers.traefik.tls.certresolver: le\n      traefik.http.routers.traefik.service: traefik@docker\n      traefik.http.services.traefik.loadbalancer.server.port: 8080\n\nnetworks:\n  proxy_external:\n    external: true\n  tunnel_external:\n    external: true\n</code></pre> <p>Note</p> <p>Make sure to replace <code>CLOUDFLARE_API_TOKEN</code> with a token you have acquired from your own dashboard.</p>"},{"location":"linux/services/networking/traefik/#reverse-proxy","title":"Reverse Proxy","text":"<p>Traefik usually comes with a web dashboard for managing the resources exposed. Now, we're actually using it to expose its dashboard itself.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you don't want to use the proxy itself to expose its own dashboard, feel free to remove those labels and bind the dashboard port manually.</p>"},{"location":"linux/services/networking/traefik/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/networking/traefik/#further-reading","title":"Further Reading","text":"<p>This page just described the basic steps to follow to set up the reverse proxy. This is far from done, make sure you check out:</p> <ul> <li>How to expose web services via Cloudflare with cloudflared.</li> </ul>"},{"location":"linux/services/networking/zerotier/","title":"ZeroTier-One","text":"<p>ZeroTier-One is a virtual LAN service, similar to Hamachi, that allows you to have your services exposed through a VPN.</p> <p>There is an official image for this service that we'll use: zerotier/zerotier.</p>"},{"location":"linux/services/networking/zerotier/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/networking/zerotier\n</code></pre>"},{"location":"linux/services/networking/zerotier/#creating-a-network","title":"Creating a Network","text":"<p>To create a network, simply visit My ZeroTier, login to your account (or create one if needed) and simply click on the <code>Create Network</code> button. This will give you a Network ID (which you should keep since we'll need this). This Network ID is what you need to share with your friends so that they can connect to your network. If you leave the network settings to be private, you may need to manually authorize new members into the network.</p>"},{"location":"linux/services/networking/zerotier/#docker-compose","title":"Docker Compose","text":"<p>ZeroTier-One will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  vpn:\n    image: zerotier/zerotier:latest\n    restart: unless-stopped\n    network_mode: host\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    volumes:\n      - ./config/authtoken.secret:/var/lib/zerotier-one/authtoken.secret\n      - ./config/identity.public:/var/lib/zerotier-one/identity.public\n      - ./config/identity.secret:/var/lib/zerotier-one/identity.secret\n    command: NETWORK_ID\n    environment:\n      TZ: America/Guayaquil\n</code></pre> <p>Note</p> <p>Replace <code>NETWORK_ID</code> with your Network ID. You can add multiple networks separated by a whitespace.</p>"},{"location":"linux/services/networking/zerotier/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/observability/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to observability services.</p> <pre><code>mkdir ~/services/observability\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"linux/services/observability/grafana/","title":"Grafana","text":"<p>Warning</p> <p>You should set up Prometheus first before setting this up.</p> <p>Grafana is a dashboard that can consume from Prometheus and other data sources to display all the information that you need.</p> <p>There is an official image for this service that we'll use: grafana/grafana.</p>"},{"location":"linux/services/observability/grafana/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/observability/grafana\n</code></pre>"},{"location":"linux/services/observability/grafana/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>grafana_external</code> network before defining the <code>docker-compose.yml</code> file. If you haven't created this network, you can do so with:</p> <pre><code>docker network create grafana_external\n</code></pre>"},{"location":"linux/services/observability/grafana/#docker-compose","title":"Docker Compose","text":"<p>Grafana will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: grafana/grafana:latest\n    restart: unless-stopped\n    user: 1000:1000\n    networks:\n      default:\n      grafana_external:\n      proxy_external:\n        aliases:\n          - grafana\n    volumes:\n      - ./data:/var/lib/grafana\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.grafana.rule: Host(`grafana.home.example.com`) || Host(`grafana.vpn.example.com`)\n      traefik.http.routers.grafana.entrypoints: local-https\n      traefik.http.routers.grafana.tls: true\n      traefik.http.routers.grafana.tls.certresolver: le\n      traefik.http.routers.grafana.service: grafana@docker\n      traefik.http.services.grafana.loadbalancer.server.port: 3000\n\nnetworks:\n  grafana_external:\n    external: true\n  proxy_external:\n    external: true\n</code></pre>"},{"location":"linux/services/observability/grafana/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/observability/grafana/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/observability/grafana/#add-prometheus-to-grafana","title":"Add Prometheus to Grafana","text":"<p>Visit the Grafana's site by accessing:</p> <pre><code>http://localhost:3000\n</code></pre> <p>And create your Admin account.</p> <p>Make your way to the following page:</p> <pre><code>Configuration &gt; Data Sources &gt; Add a data source &gt; Prometheus\n</code></pre> <p>And add the local IP of your server.</p>"},{"location":"linux/services/observability/grafana/#add-a-dashboard","title":"Add a Dashboard","text":"<p>Make your way to the following page.</p> <pre><code>Create &gt; Import\n</code></pre> <p>And paste the following JSON in it:</p> <pre><code>{\n  \"annotations\": {\n    \"list\": [\n      {\n        \"builtIn\": 1,\n        \"datasource\": {\n          \"type\": \"grafana\",\n          \"uid\": \"-- Grafana --\"\n        },\n        \"enable\": true,\n        \"hide\": true,\n        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n        \"name\": \"Annotations &amp; Alerts\",\n        \"target\": {\n          \"limit\": 100,\n          \"matchAny\": false,\n          \"tags\": [],\n          \"type\": \"dashboard\"\n        },\n        \"type\": \"dashboard\"\n      }\n    ]\n  },\n  \"description\": \"moonstar's Server Dashboard\",\n  \"editable\": true,\n  \"fiscalYearStartMonth\": 0,\n  \"graphTooltip\": 0,\n  \"id\": 4,\n  \"iteration\": 1653438285360,\n  \"links\": [],\n  \"liveNow\": false,\n  \"panels\": [\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 0\n      },\n      \"id\": 8,\n      \"panels\": [],\n      \"title\": \"Quick Info\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"CPU Usage\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"#EAB839\",\n                \"value\": 75\n              },\n              {\n                \"color\": \"semi-dark-red\",\n                \"value\": 95\n              }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 4,\n        \"w\": 3,\n        \"x\": 0,\n        \"y\": 1\n      },\n      \"id\": 2,\n      \"options\": {\n        \"orientation\": \"horizontal\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showThresholdLabels\": false,\n        \"showThresholdMarkers\": true,\n        \"text\": {}\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"(((count(count(node_cpu_seconds_total{instance=\\\"$node\\\",job=\\\"$job\\\"}) by (cpu))) - avg(sum by (mode)(irate(node_cpu_seconds_total{mode='idle',instance=\\\"$node\\\",job=\\\"$job\\\"}[5m])))) * 100) / count(count(node_cpu_seconds_total{instance=\\\"$node\\\",job=\\\"$job\\\"}) by (cpu))\",\n          \"hide\": false,\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"CPU Usage\",\n      \"type\": \"gauge\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"CPU temperature\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"blue\",\n                \"value\": null\n              },\n              {\n                \"color\": \"#EAB839\",\n                \"value\": 45\n              },\n              {\n                \"color\": \"semi-dark-red\",\n                \"value\": 65\n              }\n            ]\n          },\n          \"unit\": \"celsius\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 4,\n        \"w\": 3,\n        \"x\": 3,\n        \"y\": 1\n      },\n      \"id\": 5,\n      \"options\": {\n        \"orientation\": \"horizontal\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"mean\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showThresholdLabels\": false,\n        \"showThresholdMarkers\": true,\n        \"text\": {}\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"avg(node_hwmon_temp_celsius{instance=\\\"$node\\\",job=\\\"$job\\\"})\",\n          \"hide\": false,\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"CPU Temp\",\n      \"type\": \"gauge\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"Sys Load (5m avg)\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"#EAB839\",\n                \"value\": 75\n              },\n              {\n                \"color\": \"semi-dark-red\",\n                \"value\": 95\n              }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 4,\n        \"w\": 3,\n        \"x\": 6,\n        \"y\": 1\n      },\n      \"id\": 6,\n      \"options\": {\n        \"orientation\": \"horizontal\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showThresholdLabels\": false,\n        \"showThresholdMarkers\": true,\n        \"text\": {}\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"avg(node_load5{instance=\\\"$node\\\",job=\\\"$job\\\"}) /  count(count(node_cpu_seconds_total{instance=\\\"$node\\\",job=\\\"$job\\\"}) by (cpu)) * 100\",\n          \"hide\": false,\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Sys Load\",\n      \"type\": \"gauge\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"RAM Usage\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"#EAB839\",\n                \"value\": 70\n              },\n              {\n                \"color\": \"semi-dark-red\",\n                \"value\": 90\n              }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 4,\n        \"w\": 3,\n        \"x\": 9,\n        \"y\": 1\n      },\n      \"id\": 3,\n      \"options\": {\n        \"orientation\": \"horizontal\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showThresholdLabels\": false,\n        \"showThresholdMarkers\": true,\n        \"text\": {}\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"100 - ((node_memory_MemAvailable_bytes{instance=\\\"$node\\\",job=\\\"$job\\\"} * 100) / node_memory_MemTotal_bytes{instance=\\\"$node\\\",job=\\\"$job\\\"})\",\n          \"hide\": false,\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"RAM Usage\",\n      \"type\": \"gauge\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"Swap Usage\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"#EAB839\",\n                \"value\": 15\n              },\n              {\n                \"color\": \"semi-dark-red\",\n                \"value\": 30\n              }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 4,\n        \"w\": 3,\n        \"x\": 12,\n        \"y\": 1\n      },\n      \"id\": 4,\n      \"options\": {\n        \"orientation\": \"horizontal\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"showThresholdLabels\": false,\n        \"showThresholdMarkers\": true,\n        \"text\": {}\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"((node_memory_SwapTotal_bytes{instance=\\\"$node\\\",job=\\\"$job\\\"} - node_memory_SwapFree_bytes{instance=\\\"$node\\\",job=\\\"$job\\\"}) / (node_memory_SwapTotal_bytes{instance=\\\"$node\\\",job=\\\"$job\\\"} )) * 100\",\n          \"hide\": false,\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Swap Usage\",\n      \"type\": \"gauge\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"CPU Cores\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"short\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 2,\n        \"w\": 3,\n        \"x\": 15,\n        \"y\": 1\n      },\n      \"id\": 10,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"none\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"horizontal\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"textMode\": \"auto\"\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"expr\": \"count(count(node_cpu_seconds_total{instance=\\\"$node\\\",job=\\\"$job\\\"}) by (cpu))\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"CPU Cores\",\n      \"type\": \"stat\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"RAM Total\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"decbytes\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 2,\n        \"w\": 3,\n        \"x\": 18,\n        \"y\": 1\n      },\n      \"id\": 11,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"none\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"horizontal\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"textMode\": \"auto\"\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"expr\": \"node_memory_MemTotal_bytes{instance=\\\"$node\\\",job=\\\"$job\\\"}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"RAM Total\",\n      \"type\": \"stat\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"Swap Total\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"decbytes\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 2,\n        \"w\": 3,\n        \"x\": 21,\n        \"y\": 1\n      },\n      \"id\": 12,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"none\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"horizontal\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"textMode\": \"auto\"\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"expr\": \"node_memory_SwapTotal_bytes{instance=\\\"$node\\\",job=\\\"$job\\\"}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Swap Total\",\n      \"type\": \"stat\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"Uptime\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"dtdhms\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 2,\n        \"w\": 3,\n        \"x\": 15,\n        \"y\": 3\n      },\n      \"id\": 13,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"none\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"horizontal\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"textMode\": \"auto\"\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"expr\": \"node_time_seconds{instance=\\\"$node\\\",job=\\\"$job\\\"} - node_boot_time_seconds{instance=\\\"$node\\\",job=\\\"$job\\\"}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Uptime\",\n      \"type\": \"stat\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"/ Total Size\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"decbytes\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 2,\n        \"w\": 3,\n        \"x\": 18,\n        \"y\": 3\n      },\n      \"id\": 14,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"none\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"horizontal\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"textMode\": \"auto\"\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"expr\": \"node_filesystem_size_bytes{instance=\\\"$node\\\",job=\\\"$job\\\",mountpoint=\\\"/\\\",fstype!=\\\"rootfs\\\"}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"/ Total Size\",\n      \"type\": \"stat\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"/ Usage\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"max\": 100,\n          \"min\": 0,\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"#EAB839\",\n                \"value\": 65\n              },\n              {\n                \"color\": \"semi-dark-red\",\n                \"value\": 90\n              }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 2,\n        \"w\": 3,\n        \"x\": 21,\n        \"y\": 3\n      },\n      \"id\": 15,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"none\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"horizontal\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"textMode\": \"auto\"\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"expr\": \"100 - ((node_filesystem_avail_bytes{instance=\\\"$node\\\",job=\\\"$job\\\",mountpoint=\\\"/\\\",fstype!=\\\"rootfs\\\"} * 100) / node_filesystem_size_bytes{instance=\\\"$node\\\",job=\\\"$job\\\",mountpoint=\\\"/\\\",fstype!=\\\"rootfs\\\"})\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"/ Usage\",\n      \"type\": \"stat\"\n    },\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 5\n      },\n      \"id\": 26,\n      \"panels\": [],\n      \"title\": \"Network Stats\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"Bytes Received/Transferred [$dev]\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 10,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"decbytes\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 8,\n        \"x\": 0,\n        \"y\": 6\n      },\n      \"id\": 28,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [\n            \"min\",\n            \"max\",\n            \"mean\",\n            \"lastNotNull\"\n          ],\n          \"displayMode\": \"table\",\n          \"placement\": \"bottom\"\n        },\n        \"tooltip\": {\n          \"mode\": \"multi\",\n          \"sort\": \"none\"\n        }\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"node_network_receive_bytes_total{instance=\\\"$node\\\",job=\\\"$job\\\",device=\\\"$network_interface\\\"}\",\n          \"legendFormat\": \"Bytes Received\",\n          \"range\": true,\n          \"refId\": \"A\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"node_network_transmit_bytes_total{instance=\\\"$node\\\",job=\\\"$job\\\",device=\\\"$network_interface\\\"}\",\n          \"hide\": false,\n          \"legendFormat\": \"Bytes Transferred\",\n          \"range\": true,\n          \"refId\": \"B\"\n        }\n      ],\n      \"title\": \"Bytes Received/Transferred\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"Transfer Speed [$network_interface]\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 10,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"Bps\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 8,\n        \"x\": 8,\n        \"y\": 6\n      },\n      \"id\": 29,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [\n            \"min\",\n            \"max\",\n            \"mean\",\n            \"lastNotNull\"\n          ],\n          \"displayMode\": \"table\",\n          \"placement\": \"bottom\"\n        },\n        \"tooltip\": {\n          \"mode\": \"multi\",\n          \"sort\": \"none\"\n        }\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": false,\n          \"expr\": \"rate(node_network_receive_bytes_total{instance=\\\"$node\\\",job=\\\"$job\\\",device=\\\"$network_interface\\\"}[5m])\",\n          \"instant\": false,\n          \"legendFormat\": \"Receive Speed\",\n          \"range\": true,\n          \"refId\": \"A\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"rate(node_network_transmit_bytes_total{instance=\\\"$node\\\",job=\\\"$job\\\",device=\\\"$network_interface\\\"}[5m])\",\n          \"hide\": false,\n          \"legendFormat\": \"Transmit Speed\",\n          \"range\": true,\n          \"refId\": \"B\"\n        }\n      ],\n      \"title\": \"Transfer Speed\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"TCP Connections [$network_interface]\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 10,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"short\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 8,\n        \"x\": 16,\n        \"y\": 6\n      },\n      \"id\": 30,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [\n            \"min\",\n            \"max\",\n            \"mean\",\n            \"lastNotNull\"\n          ],\n          \"displayMode\": \"table\",\n          \"placement\": \"bottom\"\n        },\n        \"tooltip\": {\n          \"mode\": \"multi\",\n          \"sort\": \"none\"\n        }\n      },\n      \"pluginVersion\": \"8.5.3\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": false,\n          \"expr\": \"node_netstat_Tcp_CurrEstab\",\n          \"instant\": false,\n          \"legendFormat\": \"Number of Connections\",\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"TCP Connections\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 14\n      },\n      \"id\": 32,\n      \"panels\": [],\n      \"title\": \"CPU Stats\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"CPU Core Frequency\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 10,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"rothz\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 8,\n        \"x\": 0,\n        \"y\": 15\n      },\n      \"id\": 34,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [\n            \"min\",\n            \"max\",\n            \"mean\",\n            \"lastNotNull\"\n          ],\n          \"displayMode\": \"table\",\n          \"placement\": \"bottom\"\n        },\n        \"tooltip\": {\n          \"mode\": \"multi\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"node_cpu_scaling_frequency_hertz\",\n          \"legendFormat\": \"Core {{cpu}}\",\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"CPU Core Frequency\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"CPU Usage by Mode\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 10,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 8,\n        \"x\": 8,\n        \"y\": 15\n      },\n      \"id\": 35,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [\n            \"min\",\n            \"max\",\n            \"mean\",\n            \"lastNotNull\"\n          ],\n          \"displayMode\": \"table\",\n          \"placement\": \"bottom\",\n          \"sortBy\": \"Max\",\n          \"sortDesc\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"multi\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": false,\n          \"expr\": \"avg(rate(node_cpu_seconds_total{instance=\\\"$node\\\",job=\\\"$job\\\",mode=\\\"system\\\"}[5m]) * 100) \",\n          \"instant\": false,\n          \"legendFormat\": \"system\",\n          \"range\": true,\n          \"refId\": \"A\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"avg(rate(node_cpu_seconds_total{instance=\\\"$node\\\",job=\\\"$job\\\",mode=\\\"user\\\"}[5m]) * 100) \",\n          \"hide\": false,\n          \"legendFormat\": \"user\",\n          \"range\": true,\n          \"refId\": \"B\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"avg(rate(node_cpu_seconds_total{instance=\\\"$node\\\",job=\\\"$job\\\",mode=\\\"iowait\\\"}[5m]) * 100) \",\n          \"hide\": false,\n          \"legendFormat\": \"iowait\",\n          \"range\": true,\n          \"refId\": \"C\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"avg(rate(node_cpu_seconds_total{instance=\\\"$node\\\",job=\\\"$job\\\",mode=\\\"steal\\\"}[5m]) * 100) \",\n          \"hide\": false,\n          \"legendFormat\": \"steal\",\n          \"range\": true,\n          \"refId\": \"D\"\n        }\n      ],\n      \"title\": \"CPU Usage by Mode\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"UCHnO3Wgz\"\n      },\n      \"description\": \"CPU Usage\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 10,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"decimals\": 0,\n          \"mappings\": [],\n          \"noValue\": \"N/A\",\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"percent\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 8,\n        \"x\": 16,\n        \"y\": 15\n      },\n      \"id\": 36,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [\n            \"min\",\n            \"max\",\n            \"mean\",\n            \"lastNotNull\"\n          ],\n          \"displayMode\": \"table\",\n          \"placement\": \"bottom\",\n          \"sortBy\": \"Max\",\n          \"sortDesc\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"multi\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": false,\n          \"expr\": \"avg(rate(node_cpu_seconds_total{instance=\\\"$node\\\",job=\\\"$job\\\",mode=\\\"system\\\"}[5m]) * 100) + avg(rate(node_cpu_seconds_total{instance=\\\"$node\\\",job=\\\"$job\\\",mode=\\\"user\\\"}[5m]) * 100) + avg(rate(node_cpu_seconds_total{instance=\\\"$node\\\",job=\\\"$job\\\",mode=\\\"iowait\\\"}[5m]) * 100) + avg(rate(node_cpu_seconds_total{instance=\\\"$node\\\",job=\\\"$job\\\",mode=\\\"steal\\\"}[5m]) * 100) \",\n          \"instant\": false,\n          \"legendFormat\": \"CPU Usage\",\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"CPU Usage\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"collapsed\": true,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 26\n      },\n      \"id\": 17,\n      \"panels\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"description\": \"Bytes Read/Written [$drive_name ]\",\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 10,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"smooth\",\n                \"lineStyle\": {\n                  \"fill\": \"solid\"\n                },\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"never\",\n                \"spanNulls\": true,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"decimals\": 0,\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\"\n                  }\n                ]\n              },\n              \"unit\": \"decbytes\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 9,\n            \"x\": 0,\n            \"y\": 27\n          },\n          \"id\": 19,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [\n                \"min\",\n                \"max\",\n                \"mean\",\n                \"lastNotNull\"\n              ],\n              \"displayMode\": \"table\",\n              \"placement\": \"bottom\"\n            },\n            \"tooltip\": {\n              \"mode\": \"multi\",\n              \"sort\": \"none\"\n            }\n          },\n          \"pluginVersion\": \"8.5.3\",\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"UCHnO3Wgz\"\n              },\n              \"editorMode\": \"code\",\n              \"exemplar\": false,\n              \"expr\": \"rate(node_disk_read_bytes_total{instance=\\\"$node\\\",job=\\\"$job\\\",device=\\\"$drive_name\\\"}[5m])\",\n              \"instant\": false,\n              \"legendFormat\": \"Bytes Read\",\n              \"range\": true,\n              \"refId\": \"A\"\n            },\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"UCHnO3Wgz\"\n              },\n              \"editorMode\": \"code\",\n              \"expr\": \"rate(node_disk_written_bytes_total{instance=\\\"$node\\\",job=\\\"$job\\\",device=\\\"$drive_name\\\"}[5m])\",\n              \"hide\": false,\n              \"legendFormat\": \"Bytes Written\",\n              \"range\": true,\n              \"refId\": \"B\"\n            }\n          ],\n          \"title\": \"Bytes Read/Written\",\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"description\": \"Disk IOps Completed [$drive_name ]\",\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 10,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"smooth\",\n                \"lineStyle\": {\n                  \"fill\": \"solid\"\n                },\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"never\",\n                \"spanNulls\": true,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"decimals\": 0,\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\"\n                  }\n                ]\n              },\n              \"unit\": \"iops\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 9,\n            \"x\": 9,\n            \"y\": 27\n          },\n          \"id\": 24,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [\n                \"min\",\n                \"max\",\n                \"mean\",\n                \"lastNotNull\"\n              ],\n              \"displayMode\": \"table\",\n              \"placement\": \"bottom\"\n            },\n            \"tooltip\": {\n              \"mode\": \"multi\",\n              \"sort\": \"none\"\n            }\n          },\n          \"pluginVersion\": \"8.5.3\",\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"UCHnO3Wgz\"\n              },\n              \"editorMode\": \"code\",\n              \"exemplar\": false,\n              \"expr\": \"irate(node_disk_reads_completed_total{instance=\\\"$node\\\",job=\\\"$job\\\",device=\\\"$drive_name\\\"}[1m])\",\n              \"instant\": false,\n              \"legendFormat\": \"Reads Completed\",\n              \"range\": true,\n              \"refId\": \"A\"\n            },\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"UCHnO3Wgz\"\n              },\n              \"editorMode\": \"code\",\n              \"expr\": \"irate(node_disk_writes_completed_total{instance=\\\"$node\\\",job=\\\"$job\\\",device=\\\"$drive_name\\\"}[1m])\",\n              \"hide\": false,\n              \"legendFormat\": \"Writes Completed\",\n              \"range\": true,\n              \"refId\": \"B\"\n            }\n          ],\n          \"title\": \"Disk IOps Completed\",\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"description\": \"$drive_name Total Size\",\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"thresholds\"\n              },\n              \"decimals\": 0,\n              \"mappings\": [],\n              \"noValue\": \"N/A\",\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\"\n                  }\n                ]\n              },\n              \"unit\": \"decbytes\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 4,\n            \"w\": 3,\n            \"x\": 18,\n            \"y\": 27\n          },\n          \"id\": 20,\n          \"options\": {\n            \"colorMode\": \"value\",\n            \"graphMode\": \"none\",\n            \"justifyMode\": \"auto\",\n            \"orientation\": \"horizontal\",\n            \"reduceOptions\": {\n              \"calcs\": [\n                \"lastNotNull\"\n              ],\n              \"fields\": \"\",\n              \"values\": false\n            },\n            \"textMode\": \"auto\"\n          },\n          \"pluginVersion\": \"8.5.3\",\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"UCHnO3Wgz\"\n              },\n              \"editorMode\": \"code\",\n              \"expr\": \"sum(node_filesystem_size_bytes{device=~\\\".+$drive_name.?\\\"})\",\n              \"range\": true,\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Total Size\",\n          \"type\": \"stat\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"description\": \"$drive_name Used Space\",\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"thresholds\"\n              },\n              \"decimals\": 0,\n              \"mappings\": [],\n              \"noValue\": \"N/A\",\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"yellow\"\n                  }\n                ]\n              },\n              \"unit\": \"decbytes\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 4,\n            \"w\": 3,\n            \"x\": 21,\n            \"y\": 27\n          },\n          \"id\": 22,\n          \"options\": {\n            \"colorMode\": \"value\",\n            \"graphMode\": \"none\",\n            \"justifyMode\": \"auto\",\n            \"orientation\": \"horizontal\",\n            \"reduceOptions\": {\n              \"calcs\": [\n                \"lastNotNull\"\n              ],\n              \"fields\": \"\",\n              \"values\": false\n            },\n            \"textMode\": \"auto\"\n          },\n          \"pluginVersion\": \"8.5.3\",\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"UCHnO3Wgz\"\n              },\n              \"editorMode\": \"code\",\n              \"expr\": \"sum(node_filesystem_size_bytes{device=~\\\".+$drive_name.?\\\"}) - sum(node_filesystem_avail_bytes{device=~\\\".+$drive_name.?\\\"})\",\n              \"range\": true,\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Used Space\",\n          \"type\": \"stat\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"description\": \"$drive_name Free Space\",\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"thresholds\"\n              },\n              \"decimals\": 0,\n              \"mappings\": [],\n              \"noValue\": \"N/A\",\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"semi-dark-red\"\n                  },\n                  {\n                    \"color\": \"#EAB839\",\n                    \"value\": 20\n                  },\n                  {\n                    \"color\": \"green\",\n                    \"value\": 50\n                  }\n                ]\n              },\n              \"unit\": \"decbytes\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 4,\n            \"w\": 3,\n            \"x\": 18,\n            \"y\": 31\n          },\n          \"id\": 21,\n          \"options\": {\n            \"colorMode\": \"value\",\n            \"graphMode\": \"none\",\n            \"justifyMode\": \"auto\",\n            \"orientation\": \"horizontal\",\n            \"reduceOptions\": {\n              \"calcs\": [\n                \"lastNotNull\"\n              ],\n              \"fields\": \"\",\n              \"values\": false\n            },\n            \"textMode\": \"auto\"\n          },\n          \"pluginVersion\": \"8.5.3\",\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"UCHnO3Wgz\"\n              },\n              \"editorMode\": \"code\",\n              \"expr\": \"sum(node_filesystem_avail_bytes{device=~\\\".+$drive_name.?\\\"})\",\n              \"range\": true,\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Free Space\",\n          \"type\": \"stat\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"UCHnO3Wgz\"\n          },\n          \"description\": \"$drive_name Disk Usage\",\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"thresholds\"\n              },\n              \"decimals\": 0,\n              \"mappings\": [],\n              \"max\": 100,\n              \"min\": 0,\n              \"noValue\": \"N/A\",\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\"\n                  },\n                  {\n                    \"color\": \"#EAB839\",\n                    \"value\": 75\n                  },\n                  {\n                    \"color\": \"semi-dark-red\",\n                    \"value\": 90\n                  }\n                ]\n              },\n              \"unit\": \"percent\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 4,\n            \"w\": 3,\n            \"x\": 21,\n            \"y\": 31\n          },\n          \"id\": 23,\n          \"options\": {\n            \"orientation\": \"horizontal\",\n            \"reduceOptions\": {\n              \"calcs\": [\n                \"lastNotNull\"\n              ],\n              \"fields\": \"\",\n              \"values\": false\n            },\n            \"showThresholdLabels\": false,\n            \"showThresholdMarkers\": true,\n            \"text\": {}\n          },\n          \"pluginVersion\": \"8.5.3\",\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"UCHnO3Wgz\"\n              },\n              \"editorMode\": \"code\",\n              \"expr\": \"((sum(node_filesystem_size_bytes{device=~\\\".+$drive_name.?\\\"}) - sum(node_filesystem_avail_bytes{device=~\\\".+$drive_name.?\\\"})) / sum(node_filesystem_size_bytes{device=~\\\".+$drive_name.?\\\"})) * 100\",\n              \"hide\": false,\n              \"range\": true,\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Disk Usage\",\n          \"type\": \"gauge\"\n        }\n      ],\n      \"repeat\": \"drive_name\",\n      \"title\": \"Drive Stats for /dev/$drive_name\",\n      \"type\": \"row\"\n    }\n  ],\n  \"refresh\": \"10s\",\n  \"schemaVersion\": 36,\n  \"style\": \"dark\",\n  \"tags\": [\n    \"linux\",\n    \"node-exporter\"\n  ],\n  \"templating\": {\n    \"list\": [\n      {\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"node\",\n          \"value\": \"node\"\n        },\n        \"datasource\": {\n          \"type\": \"prometheus\",\n          \"uid\": \"UCHnO3Wgz\"\n        },\n        \"definition\": \"label_values(node_uname_info, job)\",\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"label\": \"Job\",\n        \"multi\": false,\n        \"name\": \"job\",\n        \"options\": [],\n        \"query\": {\n          \"query\": \"label_values(node_uname_info, job)\",\n          \"refId\": \"StandardVariableQuery\"\n        },\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 1,\n        \"type\": \"query\"\n      },\n      {\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"host.docker.internal:9100\",\n          \"value\": \"host.docker.internal:9100\"\n        },\n        \"datasource\": {\n          \"type\": \"prometheus\",\n          \"uid\": \"UCHnO3Wgz\"\n        },\n        \"definition\": \"label_values(node_uname_info{job=\\\"$job\\\"}, instance)\",\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"label\": \"Host\",\n        \"multi\": false,\n        \"name\": \"node\",\n        \"options\": [],\n        \"query\": {\n          \"query\": \"label_values(node_uname_info{job=\\\"$job\\\"}, instance)\",\n          \"refId\": \"StandardVariableQuery\"\n        },\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 1,\n        \"type\": \"query\"\n      },\n      {\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"enp2s0\",\n          \"value\": \"enp2s0\"\n        },\n        \"datasource\": {\n          \"type\": \"prometheus\",\n          \"uid\": \"UCHnO3Wgz\"\n        },\n        \"definition\": \"label_values(node_network_info{operstate=\\\"up\\\"}, device)\",\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"label\": \"NIC\",\n        \"multi\": false,\n        \"name\": \"network_interface\",\n        \"options\": [],\n        \"query\": {\n          \"query\": \"label_values(node_network_info{operstate=\\\"up\\\"}, device)\",\n          \"refId\": \"StandardVariableQuery\"\n        },\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 0,\n        \"type\": \"query\"\n      },\n      {\n        \"current\": {\n          \"selected\": true,\n          \"text\": [\n            \"All\"\n          ],\n          \"value\": [\n            \"$__all\"\n          ]\n        },\n        \"datasource\": {\n          \"type\": \"prometheus\",\n          \"uid\": \"UCHnO3Wgz\"\n        },\n        \"definition\": \"label_values(node_disk_info, device)\",\n        \"description\": \"Drive /dev/sdX\",\n        \"hide\": 0,\n        \"includeAll\": true,\n        \"label\": \"Drive\",\n        \"multi\": true,\n        \"name\": \"drive_name\",\n        \"options\": [],\n        \"query\": {\n          \"query\": \"label_values(node_disk_info, device)\",\n          \"refId\": \"StandardVariableQuery\"\n        },\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 1,\n        \"type\": \"query\"\n      }\n    ]\n  },\n  \"time\": {\n    \"from\": \"now-5m\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {\n    \"refresh_intervals\": [\n      \"10s\",\n      \"1m\",\n      \"5m\",\n      \"15m\",\n      \"30m\"\n    ]\n  },\n  \"timezone\": \"browser\",\n  \"title\": \"Server Dashboard\",\n  \"uid\": \"iUjT2qZgz\",\n  \"version\": 9,\n  \"weekStart\": \"\"\n}\n</code></pre> <p>This dashboard will look similar to this:</p> <p> </p>"},{"location":"linux/services/observability/librespeed/","title":"LibreSpeed","text":"<p>LibreSpeed is a self-hosted speed test, useful to check our connection from outside into our server.</p> <p>There is no official image for this service, so we'll use ghcr.io/linuxserver/librespeed.</p>"},{"location":"linux/services/observability/librespeed/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/observability/librespeed\n</code></pre>"},{"location":"linux/services/observability/librespeed/#docker-compose","title":"Docker Compose","text":"<p>LibreSpeed will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: ghcr.io/linuxserver/librespeed:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - librespeed\n    volumes:\n      - ./config:/config\n    environment:\n      TZ: America/Guayaquil\n      PUID: 1000\n      PGID: 1000\n      PASSWORD: DATABASE_PASSWORD\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.librespeed.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.librespeed.entrypoints: public\n      traefik.http.routers.librespeed.service: librespeed@docker\n      traefik.http.services.librespeed.loadbalancer.server.port: 80\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>In the case of the <code>PUID</code> and <code>PGID</code> environment variables, <code>1000</code> corresponds to the user's UID and GID respectively. You can find the values for your own user by running <code>id $whoami</code>.</p> <p>Note</p> <p>Make sure to change <code>DATABASE_PASSWORD</code> to a custom value.</p> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"linux/services/observability/librespeed/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/observability/librespeed/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/observability/prometheus/","title":"Prometheus","text":"<p>Prometheus is a time series database for monitoring systems, this will serve as the backend of the monitoring service.</p> <p>There is an official image for this service that we'll use: prom/prometheus.</p>"},{"location":"linux/services/observability/prometheus/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/observability/prometheus\n</code></pre> <p>Inside this folder, create a <code>data</code> folder:</p> <pre><code>mkdir data\n</code></pre> <p>And also, create a <code>prometheus.yml</code> file:</p> <pre><code>nano prometheus.yml\n</code></pre> <p>Which should have the following:</p> <pre><code>global:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: \"prometheus\"\n    scrape_interval: 15s\n    static_configs:\n    - targets: [\"localhost:9090\"]\n\n  - job_name: \"node\"\n    static_configs:\n    - targets: [\"host.docker.internal:9100\"]\n</code></pre>"},{"location":"linux/services/observability/prometheus/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>grafana_external</code> network before defining the <code>docker-compose.yml</code> file. If you haven't created this network, you can do so with:</p> <pre><code>docker network create grafana_external\n</code></pre>"},{"location":"linux/services/observability/prometheus/#docker-compose","title":"Docker Compose","text":"<p>Prometheus will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: prom/prometheus:latest\n    restart: unless-stopped\n    user: 1000:1000\n    extra_hosts:\n      - host.docker.internal:host-gateway\n    networks:\n      default:\n      grafana_external:\n      proxy_external:\n        aliases:\n          - prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - ./data:/prometheus\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.prometheus.rule: Host(`prometheus.home.example.com`) ||\u00a0Host(`prometheus.vpn.example.com`)\n      traefik.http.routers.prometheus.entrypoints: local-https\n      traefik.http.routers.prometheus.tls: true\n      traefik.http.routers.prometheus.tls.certresolver: le\n      traefik.http.routers.prometheus.service: prometheus@docker\n      traefik.http.services.prometheus.loadbalancer.server.port: 9090\n\n  exporter:\n    image: prom/node-exporter:latest\n    restart: unless-stopped\n    user: 1000:1000\n    network_mode: host\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n    command:\n      - '--path.procfs=/host/proc'\n      - '--path.rootfs=/rootfs'\n      - '--path.sysfs=/host/sys'\n      - '--collector.filesystem.mount-points-exclude=^(sys|proc|dev|host|etc)($$|/)'\n    environment:\n      TZ: America/Guayaquil\n\nnetworks:\n  grafana_external:\n    external: true\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>The <code>exporter</code> service needs to have <code>network_mode: host</code> in order to have access to the main network interface to actually have valid network usage data.</p>"},{"location":"linux/services/observability/prometheus/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/observability/prometheus/#post-installation","title":"Post-Installation","text":"<p>We'll need to allow the service's port on our firewall.</p> <pre><code>sudo ufw allow 9100/tcp\n</code></pre>"},{"location":"linux/services/observability/prometheus/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/observability/scrutiny/","title":"Scrutiny","text":"<p>Scrutiny is a S.M.A.R.T monitoring tool that uses <code>smartd</code>.</p> <p>There is an official image for this service that we'll use: ghcr.io/analogj/scrutiny.</p>"},{"location":"linux/services/observability/scrutiny/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/observability/scrutiny\n</code></pre>"},{"location":"linux/services/observability/scrutiny/#docker-compose","title":"Docker Compose","text":"<p>Scrutiny will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: ghcr.io/analogj/scrutiny:master-web\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - scrutiny\n    depends_on:\n      influx:\n        condition: service_healthy\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/api/health\"]\n      interval: 5s\n      timeout: 10s\n      retries: 20\n      start_period: 10s\n    volumes:\n      - ./config:/config\n    environment:\n      TZ: America/Guayaquil\n      SCRUTINY_WEB_INFLUXDB_HOST: influx\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.scrutiny.rule: Host(`scrutiny.home.example.com`) || Host(`scrutiny.vpn.example.com`)\n      traefik.http.routers.scrutiny.entrypoints: local-https\n      traefik.http.routers.scrutiny.tls: true\n      traefik.http.routers.scrutiny.tls.certresolver: le\n      traefik.http.routers.scrutiny.service: scrutiny@docker\n      traefik.http.services.scrutiny.loadbalancer.server.port: 8080\n\n  collector:\n    image: ghcr.io/analogj/scrutiny:master-collector\n    restart: unless-stopped\n    cap_add:\n      - SYS_RAWIO\n    devices:\n      - /dev/sda:/dev/sda\n      - /dev/sdb:/dev/sdb\n      - /dev/sdc:/dev/sdc\n      - /dev/sdd:/dev/sdd\n      - /dev/sde:/dev/sde\n    depends_on:\n      web:\n        condition: service_healthy\n    volumes:\n      - /run/udev:/run/udev:ro\n    environment:\n      TZ: America/Guayaquil\n      COLLECTOR_API_ENDPOINT: http://web:8080\n      COLLECTOR_HOST_ID: scrutiny-collector\n\n  influx:\n    image: influxdb:2.2\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8086/health\"]\n      interval: 5s\n      timeout: 10s\n      retries: 20\n    volumes:\n      - ./data:/var/lib/influxdb2\n    environment:\n      TZ: America/Guayaquil\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Under <code>devices</code> make sure you're passing your hard drives. You can check <code>blkid</code> to see which device blocks to pass.</p>"},{"location":"linux/services/observability/scrutiny/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"linux/services/observability/scrutiny/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"linux/services/observability/scrutiny/#updating-results","title":"Updating Results","text":"<p>To manually update the results, run the following from inside the container's data folder:</p> <pre><code>docker compose run --rm collector scrutiny-collector-metrics run\n</code></pre>"},{"location":"linux/setting-up/","title":"Introduction","text":"<p>This section details the configuration process of the server running linux.</p>"},{"location":"linux/setting-up/#server-specs","title":"Server Specs","text":"<p>The server computer is a self-built desktop with the following specs:</p> <ul> <li>OS: Ubuntu Server 22.04 LTS 64-bit</li> <li>CPU: Intel Core i3-4170 (4 Threads) @3.70GHz</li> <li>RAM: 2x8GB DDR3 @1600MHz (16GB - Dual Channel)</li> <li>Motherboard: Biostar H81MHV3</li> <li>Storage:<ol> <li>256GB Crucial BX500 SATA SSD</li> <li>2TB WD Green 5400RPM SATA HDD</li> <li>4TB WD Elements USB 3.0 HDD</li> <li>4TB Toshiba USB 3.0 HDD</li> <li>8TB Seagate USB 3.0 HDD</li> </ol> </li> </ul>"},{"location":"linux/setting-up/custom-scripts/","title":"Custom Scripts","text":"<p>We will create some custom scripts that will help us with certain tasks. For this, we'll create the following folder:</p> <pre><code>mkdir -p /usr/local/bin\n</code></pre> <p>Then inside this folder we'll insert all the scripts that we'll add here. Make sure to make them executable with:</p> <pre><code>chmod +x &lt;file&gt;\n</code></pre>"},{"location":"linux/setting-up/custom-scripts/#custom-docker-update","title":"<code>custom-docker-update</code>","text":"<p>We'll use this script to manually update docker compose containers.</p> <p>Usage</p> <p>Run <code>custom-docker-update</code> inside the folder where <code>docker-compose.yml</code> is located to update the container images used.</p> <pre><code>#!/bin/bash\n\necho \"Stopping containers...\"\ndocker compose stop\n\necho \"Removing containers...\"\ndocker compose rm -f\n\necho \"Pulling images...\"\ndocker compose pull\n\necho \"Restarting containers...\"\ndocker compose up -d\n</code></pre>"},{"location":"linux/setting-up/custom-scripts/#custom-docker-restart","title":"<code>custom-docker-restart</code>","text":"<p>We'll use this script to completely restart docker compose containers, this removes the containers and restarts them.</p> <p>Usage</p> <p>Run <code>custom-docker-restart</code> inside the folder where <code>docker-compose.yml</code> is located to update the container images used.</p> <pre><code>#!/bin/bash\n\ndocker compose rm -fs &amp;&amp; docker compose up -d\n</code></pre>"},{"location":"linux/setting-up/docker/","title":"Docker","text":"<p>All the services in the server will be run through Docker. We'll need to first install this.</p>"},{"location":"linux/setting-up/docker/#installation","title":"Installation","text":"<p>To install Docker, simply run the following commands:</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh ./get-docker.sh\n</code></pre> <p>Once it's done, you can remove the downloaded script:</p> <pre><code>rm get-docker.sh\n</code></pre>"},{"location":"linux/setting-up/docker/#permissions","title":"Permissions","text":"<p>We'll add the required permissions for our user into the <code>docker</code> group.</p> <pre><code>sudo groupadd docker\nsudo gpasswd -a $USER docker\n</code></pre> <p>Finally, reboot the server for the changes to apply.</p>"},{"location":"linux/setting-up/docker/#networks","title":"Networks","text":"<p>By default, Docker will support up to 30 networks, and since we're planning on setting up multiple services, this limit will become problematic.</p> <p>In order to extend the number of networks, we will configure the daemon with the multiple subnets. For this, create the following file:</p> <pre><code>sudo nano /etc/docker/daemon.json\n</code></pre> <p>And paste the following text:</p> <pre><code>{\n   \"default-address-pools\": [\n        {\n            \"base\":\"172.17.0.0/12\",\n            \"size\":16\n        },\n        {\n            \"base\":\"192.168.0.0/16\",\n            \"size\":20\n        },\n        {\n            \"base\":\"10.99.0.0/16\",\n            \"size\":24\n        }\n    ]\n}\n</code></pre> <p>Then finally, restart the Docker service:</p> <pre><code>sudo service docker restart\n</code></pre>"},{"location":"linux/setting-up/installation/","title":"Installation","text":"<p>The server will be running Ubuntu Server 22.04 LTS 64-bit in headless mode, meaning that no DE or WM will be used. The installation is quick and assisted by its own install wizard. For better performance, you should install the minimal version which does not include any graphical interface other than the command line. Additionally, no packages were installed from the install wizard.</p>"},{"location":"linux/setting-up/installation/#post-installation","title":"Post-Installation","text":"<p>As a general rule of thumb, after installing the OS it is recommended to update the sources and packages:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade\n</code></pre>"},{"location":"linux/setting-up/installation/#configuring-date-and-time","title":"Configuring Date and Time","text":"<p>By default, the OS will be installed with GMT+0 as the timezone. We'll change this to conform with our real timezone which is GMT-5.</p> <pre><code>sudo timedatectl set-timezone America/Guayaquil\n</code></pre>"},{"location":"linux/setting-up/installation/#packages","title":"Packages","text":"<p>Here's a list of packages I like to have on the server, you may choose not to install them since they're not crucial.</p> <pre><code>sudo apt-get install openssh-server openssh-client net-tools neofetch nload progress nano iputils-ping htop\n</code></pre>"},{"location":"linux/setting-up/installation/#firewall","title":"Firewall","text":"<p>UFW is a friendly frontend for iptables that makes it a lot easier to add connection rules to your firewall. One of the many wonders of UFW is the fact that rules are automatically saved when set, which is not generally true for iptables.</p> <p>We'll need to install UFW and set it up.</p> <pre><code>sudo apt-get install ufw\nsudo ufw default allow outgoing\nsudo ufw default deny incoming\nsudo ufw allow ssh\nsudo ufw enable\n</code></pre> <p>The commands should be pretty self-explanatory but, just in case, these default the firewall to allow any connections going from the server to the Internet and deny any incoming connections from the Internet to the server. Make sure to also enable the <code>ssh</code> ports, otherwise you may get locked out of your system remotely and may need to physically configure the firewall to allow SSH connections.</p>"},{"location":"linux/setting-up/installation/#usage","title":"Usage","text":"<p>A very good command to check UFW's status (if it's enabled or disabled) and see all the custom rules added and active is:</p> <pre><code>sudo ufw status\n</code></pre> <p>You can add a new rule by using:</p> <pre><code>sudo ufw allow &lt;PORT_RANGE&gt;/&lt;PROTOCOL&gt;\n</code></pre>"},{"location":"linux/setting-up/installation/#git","title":"Git","text":"<p>By default, <code>git</code> does not have a credential store configured, so make sure you run the following command to allow git operations in protected repos:</p> <pre><code>git config --global credential.helper store\n</code></pre>"},{"location":"linux/setting-up/mounting-drives/","title":"Mounting Drives","text":"<p>This server uses multiple USB hard drives that remain constantly connected. We need these drives to mount on system startup, for this, we'll need to set up the <code>fstab</code>.</p>"},{"location":"linux/setting-up/mounting-drives/#getting-drives-uuids","title":"Getting Drives' UUIDs","text":"<p>In order to get the UUIDs of the drives in question, it is necessary to plug them in and reboot the server. Once this is done, execute the following:</p> <pre><code>lsblk -o NAME,FSTYPE,UUID\n</code></pre> <p>This will give an output similar to the following:</p> <pre><code>NAME   FSTYPE UUID\nsda           \n\u251c\u2500sda1 vfat   7811-FFBE\n\u2514\u2500sda2 ext4   3c98de9f-dc43-4e8d-85aa-767475ea957b\nsdb    ext4   418987da-2351-11e9-aec8-b8975ad7798b\nsdc           \n\u2514\u2500sdc1 ext4   43fbd170-3eff-40ec-95fc-c6cc090a5bc9\nsdd           \n\u2514\u2500sdd1 ext4   fe650c70-60fc-400a-8241-27895d38c29a\nsde           \n\u2514\u2500sde1 ext4   fedd9ed1-d4cf-4d3c-b105-7b3296f157b4\n</code></pre> <p>If you cannot tell which drive is which, you can also run the following:</p> <pre><code>sudo fdisk -l\n</code></pre> <p>Which will give out an output similar to the following:</p> <pre><code>Disk /dev/sdb: 1.82 TiB, 2000398934016 bytes, 3907029168 sectors\nDisk model: Hitachi HUA72302\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\n\n\nDisk /dev/sda: 223.57 GiB, 240057409536 bytes, 468862128 sectors\nDisk model: CT240BX500SSD1  \nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: gpt\nDisk identifier: 18C45280-7C95-4D8C-8033-81277842D6FF\n\nDevice       Start       End   Sectors   Size Type\n/dev/sda1     2048   2203647   2201600     1G EFI System\n/dev/sda2  2203648 468858879 466655232 222.5G Linux filesystem\n\n\nDisk /dev/sdc: 7.28 TiB, 8001563221504 bytes, 15628053167 sectors\nDisk model: Expansion Desk  \nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 4096 bytes\nI/O size (minimum/optimal): 4096 bytes / 4096 bytes\nDisklabel type: gpt\nDisk identifier: C581269E-50B9-4FFC-878C-4036680EF540\n\nDevice     Start         End     Sectors  Size Type\n/dev/sdc1   2048 15628052479 15628050432  7.3T Microsoft basic data\n\n\nDisk /dev/sdd: 3.64 TiB, 4000787027968 bytes, 7814037164 sectors\nDisk model: EXTERNAL_USB    \nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 4096 bytes\nI/O size (minimum/optimal): 4096 bytes / 4096 bytes\nDisklabel type: gpt\nDisk identifier: CB907ACB-024A-4CAC-A2F0-6A2B5B2C448D\n\nDevice     Start        End    Sectors  Size Type\n/dev/sdd1   2048 7814037130 7814035083  3.6T Linux filesystem\n\n\nDisk /dev/sde: 3.64 TiB, 4000752599040 bytes, 7813969920 sectors\nDisk model: Elements 25A2   \nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 4096 bytes\nI/O size (minimum/optimal): 4096 bytes / 4096 bytes\nDisklabel type: gpt\nDisk identifier: C3D4170B-C744-3D4F-BFF7-AA72B51971AE\n\nDevice     Start        End    Sectors  Size Type\n/dev/sde1   2048 7813969886 7813967839  3.6T Linux filesystem\n</code></pre> <p>Notice the <code>Device</code> value for each, reference it with the output from the previous command and you'll now be able to tell the identifier of the partitions you need.</p>"},{"location":"linux/setting-up/mounting-drives/#preparing-the-folders","title":"Preparing the Folders","text":"<p>We'll mount the hard drives in <code>/media</code>, for this we'll create the required folders like so:</p> <pre><code>sudo mkdir /media/sata_2tb /media/usb_4tb /media/usb_4tb_2 /media/usb_8tb\n</code></pre> <p>You may also change the ownership on these folders if it causes any problem.</p> <pre><code>sudo chown 1000:1000 /media/sata_2tb /media/usb_4tb /media/usb_4tb_2 /media/usb_8tb\n</code></pre>"},{"location":"linux/setting-up/mounting-drives/#modifying-fstab","title":"Modifying <code>fstab</code>","text":"<p>Danger</p> <p>Proceed at your own risk, messing up this file will most probably break your computer. You can still fix it by entering safe mode and logging in as <code>root</code> to rollback.</p> <p>We'll modify the <code>/etc/fstab</code> file.</p> <pre><code>sudo nano /etc/fstab\n</code></pre> <p>And we'll add a new line for each hard drive with the following structure:</p> <pre><code>UUID=$UUID $DIR $FORMAT defaults 0 0\n</code></pre> <p>In our case, we'll add the following lines:</p> <pre><code>UUID=418987da-2351-11e9-aec8-b8975ad7798b /media/sata_2tb ext4 defaults 0 0\nUUID=43fbd170-3eff-40ec-95fc-c6cc090a5bc9 /media/usb_8tb ext4 defaults 0 0\nUUID=fedd9ed1-d4cf-4d3c-b105-7b3296f157b4 /media/usb_4tb ext4 defaults 0 0\nUUID=fe650c70-60fc-400a-8241-27895d38c29a /media/usb_4tb_2 ext4 defaults 0 0\n</code></pre> <p>Finally, reboot the server. The hard drives should now be automatically mounted.</p>"},{"location":"vps/services/","title":"Introduction","text":"<p>This section details the installation and configuration of all the services run by the server. Almost all of these services are run through Docker, so make sure you have it set up before reading any further.</p>"},{"location":"vps/services/#configuration","title":"Configuration","text":"<p>All services will be located in the home folder. In order to be a bit more organized, we'll create a folder for everything:</p> <pre><code>mkdir ~/services\n</code></pre>"},{"location":"vps/services/management/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to management services.</p> <pre><code>mkdir ~/services/management\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"vps/services/management/portainer-agent/","title":"Portainer Agent","text":"<p>Portainer is a web UI for Docker which allows us to have an insight on all the containers running on our server.</p> <p>The Portainer agent allows you to expose the machine's Docker management to another Portainer service hosted elsewhere. We're using the agent in this case to use the main Portainer service to manage this one.</p> <p>There is an official image for this service that we'll use: portainer/agent.</p>"},{"location":"vps/services/management/portainer-agent/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/management/portainer-agent\n</code></pre>"},{"location":"vps/services/management/portainer-agent/#docker-compose","title":"Docker Compose","text":"<p>Portainer Agent will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  agent:\n    image: portainer/agent:latest\n    restart: unless-stopped\n    ports:\n      - 9001:9001\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /var/lib/docker/volumes:/var/lib/docker/volumes\n    environment:\n      TZ: America/Guayaquil\n</code></pre>"},{"location":"vps/services/management/portainer-agent/#post-installation","title":"Post-Installation","text":""},{"location":"vps/services/management/portainer-agent/#firewall","title":"Firewall","text":"<p>Make sure to create an inbound Firewall rule in your Hetzner firewall dashboard that allows <code>9001/TCP</code>.</p>"},{"location":"vps/services/management/portainer-agent/#add-to-portainer","title":"Add to Portainer","text":"<p>In your main Portainer service,</p> <ol> <li>Head over to <code>Environments &gt; Add environment</code>.</li> <li>Pick <code>Docker Standalone</code> and click on <code>Start wizard</code>.</li> <li>Select <code>Agent</code>, set a <code>Name</code> for your agent and paste your VPS's address with <code>9001</code> as the port into <code>Environment address</code>.</li> <li>Finally, click <code>Connect</code>.</li> </ol> <p>And that's it, you can now manage your VPS's Docker services from your main Portainer service.</p>"},{"location":"vps/services/management/portainer-agent/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"vps/services/networking/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to networking services.</p> <pre><code>mkdir ~/services/networking\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"vps/services/networking/cloudflared/","title":"Cloudflared","text":"<p>Warning</p> <p>You should set up Traefik first before setting this up.</p> <p>Cloudflared is a tunnel client that allows you to expose services in your network through a secure tunnel with Cloudflare.</p> <p>There is an official image for this service that we'll use: cloudflare/cloudflared.</p> <p>Note</p> <p>In order to use this service you need to have an active domain registered and configured to use Cloudflare as it's DNS zone manager.</p>"},{"location":"vps/services/networking/cloudflared/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/networking/cloudflared\n</code></pre>"},{"location":"vps/services/networking/cloudflared/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>tunnel_external</code> network before defining the <code>docker-compose.yml</code> file. If you haven't created this network, you can do so with:</p> <pre><code>docker network create tunnel_external\n</code></pre>"},{"location":"vps/services/networking/cloudflared/#creating-a-tunnel","title":"Creating a Tunnel","text":"<p>Before you can start the tunnel client, you need to acquire a token that will authenticate you to Cloudflare.</p> <p>First, visit the following page: https://one.dash.cloudflare.com and log in to your account.</p> <p>In the dashboard, click <code>Networks &gt; Tunnels</code> and click the <code>Create a tunnel</code> button.</p> <p></p> <p>Select <code>Cloudflared</code> and click <code>Next</code>.</p> <p></p> <p>Name your tunnel and click in <code>Save tunnel</code>.</p> <p></p> <p>Select <code>Docker</code> as the environment and copy the command shown below. You'll notice this command shows a token inside, you should copy this value and continue by running your Docker Compose stack with this value set as the container's <code>TUNNEL_TOKEN</code> environment variable.</p> <p>You should notice that when doing this, the webpage will update with the detected connector. If you see this, it means that your container is working perfectly. Finally click <code>Next</code>.</p> <p></p> <p>As you may have noticed, up to this point, the steps have been the same as the main server's Cloudflared service. However, since we already have a wildcard, set to the main server's tunnel, you should now create only the necessary routes. They still should point to <code>http://traefik:8000</code>.</p>"},{"location":"vps/services/networking/cloudflared/#docker-compose","title":"Docker Compose","text":"<p>Cloudflared will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  tunnel:\n    image: cloudflare/cloudflared:latest\n    restart: unless-stopped\n    networks:\n      - default\n      - tunnel_external\n    command: tunnel run\n    environment:\n      TZ: America/Guayaquil\n      TUNNEL_TOKEN: TUNNEL_TOKEN_HERE\n\nnetworks:\n  tunnel_external:\n    external: true\n</code></pre> <p>Note</p> <p>Make sure to change <code>TUNNEL_TOKEN_HERE</code> to your actual tunnel token acquired from Cloudflare.</p>"},{"location":"vps/services/networking/cloudflared/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"vps/services/networking/traefik/","title":"Traefik","text":"<p>Traefik is a reverse proxy with a first class integration with Docker.</p> <p>There is an official image for this service that we'll use: traefik.</p>"},{"location":"vps/services/networking/traefik/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/networking/traefik\n</code></pre>"},{"location":"vps/services/networking/traefik/#external-network","title":"External Network","text":"<p>Since this service needs to interoperate with another one, we'll need to have them inside the same network. Make sure to have created the <code>tunnel_external</code> and <code>proxy_external</code> networks before defining the <code>docker-compose.yml</code> file. If you haven't created these networks, you can do so with:</p> <pre><code>docker network create tunnel_external\ndocker network create proxy_external\n</code></pre>"},{"location":"vps/services/networking/traefik/#configuration","title":"Configuration","text":"<p>Create a <code>traefik.yml</code> file with the following content:</p> <pre><code>global:\n  checkNewVersion: true\n\nlog:\n  level: DEBUG\n\napi:\n  insecure: true\n  dashboard: true\n\nproviders:\n  docker:\n    exposedByDefault: false\n    watch: true\n  file:\n    fileName: /etc/traefik/traefik.yaml\n    watch: true\n\nentryPoints:\n  tunnel:\n    address: :8000\n  direct:\n    address: :8020\n\ncertificatesresolvers:\n  le:\n    acme:\n      dnschallenge:\n        provider: cloudflare\n        delaybeforecheck: 0\n        resolvers: 1.1.1.1\n      email: YOUR_EMAIL_HERE\n      storage: /letsencrypt/acme.json\n</code></pre> <p>Note</p> <p>Make sure to replace <code>YOUR_EMAIL_HERE</code> with your actual email.</p> <p>As a side note, we're using TLS in certain services that point to local IP addresses. I decided to go this route to keep using my own existing domain while keeping HTTPS active. We're using a DNS challenge which requires you to provide a Cloudflare API token with edit access for your DNS zones.</p> <p>If it does not apply to you, you may want to explore different challenges such as HTTP or TLS, or just serve your content through HTTP altogether.</p>"},{"location":"vps/services/networking/traefik/#docker-compose","title":"Docker Compose","text":"<p>Traefik will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  proxy:\n    image: traefik:latest\n    restart: unless-stopped\n    extra_hosts:\n      - host.docker.internal:host-gateway\n    networks:\n      default:\n      tunnel_external:\n        aliases:\n          - traefik\n      proxy_external:\n        aliases:\n          - traefik\n    ports:\n      - 80:8000\n      - 443:8020\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./traefik.yml:/etc/traefik/traefik.yaml\n      - ./letsencrypt:/letsencrypt\n    environment:\n      TZ: America/Guayaquil\n      CF_DNS_API_TOKEN: CLOUDFLARE_API_TOKEN\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.traefik.rule: Host(`proxy.vps.example.com`)\n      traefik.http.routers.traefik.entrypoints: direct\n      traefik.http.routers.traefik.tls: true\n      traefik.http.routers.traefik.tls.certresolver: le\n      traefik.http.routers.traefik.service: traefik@docker\n      traefik.http.services.traefik.loadbalancer.server.port: 8080\n\nnetworks:\n  proxy_external:\n    external: true\n  tunnel_external:\n    external: true\n</code></pre> <p>Note</p> <p>Make sure to replace <code>CLOUDFLARE_API_TOKEN</code> with a token you have acquired from your own dashboard.</p>"},{"location":"vps/services/networking/traefik/#reverse-proxy","title":"Reverse Proxy","text":"<p>Traefik usually comes with a web dashboard for managing the resources exposed. Now, we're actually using it to expose its dashboard itself.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you don't want to use the proxy itself to expose its own dashboard, feel free to remove those labels and bind the dashboard port manually.</p>"},{"location":"vps/services/networking/traefik/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"vps/services/networking/traefik/#further-reading","title":"Further Reading","text":"<p>This page just described the basic steps to follow to set up the reverse proxy. This is far from done, make sure you check out:</p> <ul> <li>How to expose web services via Cloudflare with cloudflared.</li> </ul>"},{"location":"vps/services/networking/zerotier/","title":"ZeroTier-One","text":"<p>ZeroTier-One is a virtual LAN service, similar to Hamachi, that allows you to have your services exposed through a VPN.</p> <p>There is an official image for this service that we'll use: zerotier/zerotier.</p>"},{"location":"vps/services/networking/zerotier/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/networking/zerotier\n</code></pre>"},{"location":"vps/services/networking/zerotier/#creating-a-network","title":"Creating a Network","text":"<p>To create a network, simply visit My ZeroTier, login to your account (or create one if needed) and simply click on the <code>Create Network</code> button. This will give you a Network ID (which you should keep since we'll need this). This Network ID is what you need to share with your friends so that they can connect to your network. If you leave the network settings to be private, you may need to manually authorize new members into the network.</p>"},{"location":"vps/services/networking/zerotier/#docker-compose","title":"Docker Compose","text":"<p>ZeroTier-One will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  vpn:\n    image: zerotier/zerotier:latest\n    restart: unless-stopped\n    network_mode: host\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    volumes:\n      - ./config/authtoken.secret:/var/lib/zerotier-one/authtoken.secret\n      - ./config/identity.public:/var/lib/zerotier-one/identity.public\n      - ./config/identity.secret:/var/lib/zerotier-one/identity.secret\n    command: NETWORK_ID\n    environment:\n      TZ: America/Guayaquil\n</code></pre> <p>Note</p> <p>Replace <code>NETWORK_ID</code> with your Network ID. You can add multiple networks separated by a whitespace.</p>"},{"location":"vps/services/networking/zerotier/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"vps/services/observability/","title":"Initialization","text":"<p>All the services inside this section will be run through on Docker. Since we'll use Docker Compose to execute the services, we'll create a folder on the main user's home folder dedicated to observability services.</p> <pre><code>mkdir ~/services/observability\n</code></pre> <p>For each service created, there will be a subfolder where a <code>docker-compose.yml</code> file will be located, alongside any data volumes required and even a <code>Dockerfile</code> if required.</p>"},{"location":"vps/services/observability/uptime-kuma/","title":"Uptime Kuma","text":"<p>Uptime Kuma is a status monitoring service that can expose a page with your services' uptime status.</p> <p>There is an official image for this service that we'll use: louislam/uptime-kuma.</p>"},{"location":"vps/services/observability/uptime-kuma/#pre-installation","title":"Pre-Installation","text":"<p>We'll create a folder in the main user's home where all the service's data will be saved.</p> <pre><code>mkdir ~/services/observability/uptime-kuma\n</code></pre>"},{"location":"vps/services/observability/uptime-kuma/#docker-compose","title":"Docker Compose","text":"<p>Uptime Kuma will be run using Docker Compose. The content of the <code>docker-compose.yml</code> file is as follows:</p> <pre><code>services:\n  web:\n    image: louislam/uptime-kuma:latest\n    restart: unless-stopped\n    networks:\n      default:\n      proxy_external:\n        aliases:\n          - uptime-kuma\n    volumes:\n      - ./data:/app/data\n    environment:\n      TZ: America/Guayaquil\n    labels:\n      traefik.enable: true\n      traefik.docker.network: proxy_external\n      traefik.http.routers.uptime-kuma.rule: Host(`subdomain.example.com`)\n      traefik.http.routers.uptime-kuma.entrypoints: tunnel\n      traefik.http.routers.uptime-kuma.service: uptime-kuma@docker\n      traefik.http.services.uptime-kuma.loadbalancer.server.port: 3001\n\nnetworks:\n  proxy_external:\n    external: true\n</code></pre> <p>Note</p> <p>Replace <code>subdomain.example.com</code> with the domain name where your service will be accessible from.</p>"},{"location":"vps/services/observability/uptime-kuma/#reverse-proxy","title":"Reverse Proxy","text":"<p>This service is exposed by a reverse proxy. More specifically, it is using Traefik.</p> <p>For this reason, you will see that this service has:</p> <ol> <li>A directive to connect it to the <code>proxy_external</code> external network.</li> <li>A container alias for the <code>proxy_external</code> network.</li> <li>A number of labels with names starting with <code>traefik</code>.</li> </ol> <p>If you're not using a reverse proxy, feel free to remove these from the <code>docker-compose.yml</code> file. Keep in mind you might need to bind the ports to connect to the service instead.</p>"},{"location":"vps/services/observability/uptime-kuma/#running","title":"Running","text":"<p>Start up the service with:</p> <pre><code>docker compose up -d\n</code></pre> <p>That's it! The service will auto-start on system startup and restart on failure.</p>"},{"location":"vps/setting-up/","title":"Introduction","text":"<p>This section details the configuration process of the VPS server.</p>"},{"location":"vps/setting-up/#server-specs","title":"Server Specs","text":"<p>The VPS used is a Hetzner CPX-11 VPS with the following specs:</p> <ul> <li>OS: Ubuntu Server 22.04 LTS 64-bit</li> <li>CPU: 2 vCPU</li> <li>RAM: 2GB</li> <li>Storage: 40GB</li> </ul>"},{"location":"vps/setting-up/custom-scripts/","title":"Custom Scripts","text":"<p>We will create some custom scripts that will help us with certain tasks. For this, we'll create the following folder:</p> <pre><code>mkdir -p /usr/local/bin\n</code></pre> <p>Then inside this folder we'll insert all the scripts that we'll add here. Make sure to make them executable with:</p> <pre><code>chmod +x &lt;file&gt;\n</code></pre>"},{"location":"vps/setting-up/custom-scripts/#custom-docker-update","title":"<code>custom-docker-update</code>","text":"<p>We'll use this script to manually update docker compose containers.</p> <p>Usage</p> <p>Run <code>custom-docker-update</code> inside the folder where <code>docker-compose.yml</code> is located to update the container images used.</p> <pre><code>#!/bin/bash\n\necho \"Stopping containers...\"\ndocker compose stop\n\necho \"Removing containers...\"\ndocker compose rm -f\n\necho \"Pulling images...\"\ndocker compose pull\n\necho \"Restarting containers...\"\ndocker compose up -d\n</code></pre>"},{"location":"vps/setting-up/custom-scripts/#custom-docker-restart","title":"<code>custom-docker-restart</code>","text":"<p>We'll use this script to completely restart docker compose containers, this removes the containers and restarts them.</p> <p>Usage</p> <p>Run <code>custom-docker-restart</code> inside the folder where <code>docker-compose.yml</code> is located to update the container images used.</p> <pre><code>#!/bin/bash\n\ndocker compose rm -fs &amp;&amp; docker compose up -d\n</code></pre>"},{"location":"vps/setting-up/docker/","title":"Docker","text":"<p>All the services in the server will be run through Docker. We'll need to first install this.</p>"},{"location":"vps/setting-up/docker/#installation","title":"Installation","text":"<p>To install Docker, simply run the following commands:</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh ./get-docker.sh\n</code></pre> <p>Once it's done, you can remove the downloaded script:</p> <pre><code>rm get-docker.sh\n</code></pre>"},{"location":"vps/setting-up/docker/#permissions","title":"Permissions","text":"<p>We'll add the required permissions for our user into the <code>docker</code> group.</p> <pre><code>sudo groupadd docker\nsudo gpasswd -a $USER docker\n</code></pre> <p>Finally, reboot the server for the changes to apply.</p>"},{"location":"vps/setting-up/installation/","title":"Installation","text":"<p>Since the VPS comes with the OS already installed, nothing else must be done.</p>"},{"location":"vps/setting-up/installation/#post-installation","title":"Post-Installation","text":"<p>As a general rule of thumb, after installing the OS it is recommended to update the sources and packages:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade\n</code></pre>"},{"location":"vps/setting-up/installation/#configuring-date-and-time","title":"Configuring Date and Time","text":"<p>By default, the OS will be installed with GMT+0 as the timezone. We'll change this to conform with our real timezone which is GMT-5.</p> <pre><code>sudo timedatectl set-timezone America/Guayaquil\n</code></pre>"},{"location":"vps/setting-up/installation/#firewall","title":"Firewall","text":"<p>Hetzner comes with a free Firewall service that I recommend you use to only allow certain ports on certain interfaces.</p> <p>I won't go much into detail because the rules depend heavily on your use case, though I recommend you be as restrictive as possible when defining ports and interfaces.</p>"},{"location":"vps/setting-up/installation/#git","title":"Git","text":"<p>By default, <code>git</code> does not have a credential store configured, so make sure you run the following command to allow git operations in protected repos:</p> <pre><code>git config --global credential.helper store\n</code></pre>"}]}